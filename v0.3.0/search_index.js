var documenterSearchIndex = {"docs":
[{"location":"filter_data/#Filtering-data","page":"-","title":"Filtering data","text":"","category":"section"},{"location":"filter_data/","page":"-","title":"-","text":"Pages = [\"filter_data.md\",]","category":"page"},{"location":"filter_data/","page":"-","title":"-","text":"setinvalid_qualityflag!\nsetinvalid_range!\nsetinvalid_nongrowingseason!\nget_growingseason\nsetinvalid_afterprecip!","category":"page"},{"location":"filter_data/#Bigleaf.setinvalid_qualityflag!","page":"-","title":"Bigleaf.setinvalid_qualityflag!","text":"setinvalid_qualityflag!(df; \n  vars=[\"LE\",\"H\",\"NEE\",\"Tair\",\"VPD\",\"wind\"],\n  qc_suffix=\"_qc\",\n  good_quality_threshold = 1.0,\n  missing_qc_as_bad = true,\n  setvalmissing = true, \n)\n\nSet records with quality flags indicating problems to false in :valid column. \n\nArguments\n\ndf: DataFrame with column :GPP\n\noptional\n\nvars=[\"LE\",\"H\",\"NEE\",\"Tair\",\"VPD\",\"wind\"]: columns to theck for quality\nqc_suffix=\"_qc\": naming of the corresponding quality-flag column\ngood_quality_threshold = 1.0: threshold in quality flag up to which data is considered good quality\nmissing_qc_as_bad = true: set to false to not mark records with missing  quality flag as invalid\nsetvalmissing = true: set to false to prevent replacing values in value column  corresponding to problematic quality flag to missing.\n\nValue\n\ndf with modified :valid and value columns. \n\nExample\n\nusing DataFrames\ndf = DataFrame(\n  NEE = 1:3, NEE_qc = [1,1,2],\n  GPP = 10:10:30, GPP_qc = [1,missing,1])\nsetinvalid_qualityflag!(df; vars = [\"NEE\", \"GPP\"])\ndf.valid == [true, false, false]\nismissing(df.GPP[2]) && ismissing(df.NEE[3])\n\n\n\n\n\n","category":"function"},{"location":"filter_data/#Bigleaf.setinvalid_range!","page":"-","title":"Bigleaf.setinvalid_range!","text":"setinvalid_range!(df, var_ranges...; setvalmissing = true, ...)\n\nSet records with values outside specified ranges to false in :valid column. \n\nIf their is no limit towards small or large values, supply -Inf or Inf as the minimum or maximum respectively. If there were false values in the :value column before, they are kept false. In addition, set values outside ranges to missing.\n\nArguments\n\ndf: DataFrame with column :GPP\nvar_ranges: Pair Varname_symbol => (min,max): closed valid interval for  respective column \n\noptional\n\nsetvalmissing: set to false to prevent replacing values in value column outside ranges to missing.\n\nValue\n\ndf with modified :valid and value columns. \n\nusing DataFrames\ndf = DataFrame(NEE = [missing, 2,3], GPP = 10:10:30)\nsetinvalid_range!(df, :NEE => (-2.0,4.0), :GPP => (8.0,28.0))\ndf.valid == [false, true, false]\nismissing(df.GPP[3])\n\n\n\n\n\n","category":"function"},{"location":"filter_data/#Bigleaf.setinvalid_nongrowingseason!","page":"-","title":"Bigleaf.setinvalid_nongrowingseason!","text":"setinvalid_nongrowingseason!(df, tGPP; kwargs...)\n\nSet non-growseason to false in :valid column.\n\nArguments\n\ndf: DataFrame with columns :GPP and :datetime\ntGPP: scalar threshold of daily GPP (see get_growingseason)\n\noptional:\n\nupdate_GPPd: set to true additionally update :GPPd_smoothed column to results from get_growingseason\nand others passed to get_growingseason\n\nValue\n\ndf with modified columns :valid and if  :GPPd_smoothed,  where all non-growing season records are set to false.\n\n\n\n\n\n","category":"function"},{"location":"filter_data/#Bigleaf.get_growingseason","page":"-","title":"Bigleaf.get_growingseason","text":"get_growingseason(GPPd, tGPP; ws=15, min_int=5, warngap=true)\n\nFilters annual time series for growing season based on smoothed daily GPP data.\n\nArguments\n\nGPPd:    daily GPP (any unit) \ntGPP:    GPP threshold (fraction of 95th percentile of the GPP time series).              Takes values between 0 and 1. \n\noptional               \n\nws:      window size used for GPP time series smoothing\nmin_int: minimum time interval in days for a given state of growing season\nwarngap: set to false to suppress warning on too few non-missing data\n\nDetails\n\nThe basic idea behind the growing season filter is that vegetation is  considered to be active when its carbon uptake (GPP) is above a specified  threshold, which is defined relative to the peak GPP (95th percentile)  observed in the year.  The GPP-threshold is calculated as:\n\nGPP_threshold = quantile(GPPd095)*tGPP\n\nGPPd time series are smoothed with a moving average to avoid fluctuations  in the delineation of the growing season. The window size defaults to 15  days, but depending on the ecosystem, other values can be appropriate. \n\nThe argument min_int serves to avoid short fluctuations in the  status growing season vs. no growing season by defining a minimum length of the status. If a time interval shorter than min_int is labeled as growing season or non-growing season, it is changed to the status of  the neighboring values, i.e its opposite.\n\nValue\n\nA NamedTuple with entries\n\nis_growingseason: a BitVector of the same length as the input GPPd in which false  indicate no growing season (dormant season) and true indicate growing season.\nGPPd_smoothed: smoothed GPPd\n\n\n\n\n\n","category":"function"},{"location":"filter_data/#Bigleaf.setinvalid_afterprecip!","page":"-","title":"Bigleaf.setinvalid_afterprecip!","text":"setinvalid_afterprecip!(df; min_precip = 0.01, hours_after = 24.0)\n\nSet records after precipitation to false in :valid column.\n\nArguments\n\ndf: DataFrame with columns :datetime and :precip sorted by :datetime  in increasing order.\n\noptional:\n\nmin_precip (in mm per timestep): minimum precip to be considered effective precipitation.\nhours_after: time after the precipitation event to be considered invalid\n\nValue\n\ndf with modified column :valid.\n\n\n\n\n\n","category":"function"},{"location":"surface_roughness/#Surface-roughness","page":"-","title":"Surface roughness","text":"","category":"section"},{"location":"surface_roughness/","page":"-","title":"-","text":"Pages = [\"surface_roughness.md\",]","category":"page"},{"location":"surface_roughness/","page":"-","title":"-","text":"Reynolds_Number\nroughness_parameters\nwind_profile","category":"page"},{"location":"surface_roughness/#Bigleaf.Reynolds_Number","page":"-","title":"Bigleaf.Reynolds_Number","text":"Reynolds_Number(Tair,pressure,ustar,z0m; constants)\n\ncalculates the Roughness Reynolds Number.\n\nArguments\n\nTair      : Air temperature (deg C)\npressure  : Atmospheric pressure (kPa)\nustar     : Friction velocity (m s-1)\nz0m       : Roughness length (m)\n\noptional\n\nconstants=bigleaf_constants()\n\nDetails\n\nThe Roughness Reynolds Number is calculated as in Massman 1999a:      Re = z0m * ustar  v, where v is the kinematic viscosity (m2 s-1).\n\nValue\n\nRoughness Reynolds Number (-)\n\nReferences\n\nMassman, W_J., 1999a: A model study of kB H- 1 for vegetated surfaces using 'localized near-field' Lagrangian theory. Journal of Hydrology 223, 27-43.\n\nTair,pressure,ustar,z0m = 25,100,0.5,0.5\nR = Reynolds_Number(Tair,pressure,ustar,z0m)                             \nâ‰ˆ(R, 15870, rtol=1e-3)\n\n\n\n\n\n","category":"function"},{"location":"surface_roughness/#Bigleaf.roughness_parameters","page":"-","title":"Bigleaf.roughness_parameters","text":"roughness_parameters(::Val{:canopy_height}    , zh; frac_d=0.7, frac_z0m=0.1)\nroughness_parameters(::Val{:canopy_height_LAI}, zh, LAI; cd=0.2, hs=0.01)\nroughness_parameters(::Val{:wind_profile}     , ustar, wind, psi_m; \n  zh, zr, d = 0.7*zh, constants)\n\nroughness_parameters(method::Val{:wind_profile}, utar, wind, Tair, pressure, H; \n  zh, zr, d = 0.7*zh, stab_formulation=Val(:Dyer_1970), constants)\nroughness_parameters(method::Val{:wind_profile}, df::DFTable; ...)\n\nA approximations of the two roughness parameters displacement height (d) and roughness length for momentum (z0m).\n\nArguments\n\nzh        : Vegetation height (m)          \nconstants=bigleaf_constants(): \n\nBy canopy height:\n\nfrac_d    : Fraction of displacement height on canopy height (-)\nfrac_z0m  : Fraction of roughness length on canopy height (-)\n\nBy canopy height and LAI\n\nLAI       : Leaf area index (-) \ncd        : Mean drag coefficient for individual leaves. Defaults to 0.2. \nhs        : roughness length of the soil surface (m). \n\nBy wind profile\n\nwind      : Wind speed at height zr (m s-1)\nustar     : Friction velocity (m s-1)\nzr        : Instrument (reference) height (m)\nd         : Zero-plane displacement height (-)\npsi_m     : value of the stability function for heat, see stability_correction\n\nAnother variant estimates of psi_m by stability_correction, which requires further input arguments. For convenience, these arguments can be provided using a DataFrame, however, the result then is not type stable.\n\nDetails\n\nThe two main roughness parameters, the displacement height (d) and the roughness length for momentum (z0m) can be estimated from simple empirical relationships with canopy height (zh). If method = Val(:canopy_height), the following formulas are used:  \n\nd = frac_d * zh\n\nz0m = frac_z0m * zh\n\nwhere frac_d defaults to 0.7 and frac_z0m to 0.1.\n\nAlternatively, d and z0m can be estimated from both canopy height and LAI (If method = Val(:canopy_height_LAI)). Based on data from Shaw & Pereira 1982, Choudhury & Monteith 1988 proposed  the following semi-empirical relations:\n\nX = cd * LAI\n\nd = 11 * zh * ln(1 + X^14) \n\nz0m = hs + 03 * zh * X^12   for 0 = X = 02\n\nz0m = hs * zh * (1 - dzh)   for 02  X \n\nIf method = Val(:wind_profile), z0m is estimated by solving the wind speed profile for z0m:\n\nz0m = median((zr - d) * exp(-k*wind  ustar - psi_m)\n\nBy default, d in this equation is fixed to 0.7*zh, but can be set to any other value.   \n\nValue\n\na NamedTuple with the following components:\n\nd: Zero-plane displacement height (m)\nz0m: Roughness length for momentum (m)\nz0m_se: Only if method = wind_profile: Standard Error of the median for z0m (m)\n\nReferences\n\nChoudhury, B. J., Monteith J_L., 1988: A four-layer model for the heat budget of homogeneous land surfaces. Q. J. R. Meteorol. Soc. 114, 373-398.\nShaw, R. H., Pereira, A., 1982: Aerodynamic roughness of a plant canopy:  a numerical experiment. Agricultural Meteorology, 26, 51-65.\n\nSee also\n\nwind_profile\n\nusing DataFrames\n# estimate d and z0m from canopy height for a dense (LAI=5) and open (LAI=2) canopy\nzh = 25.0\nroughness_parameters(Val(:canopy_height_LAI),zh,5)\nroughness_parameters(Val(:canopy_height_LAI),zh,2)   \n   \n# fix d to 0.7*zh and estimate z0m from the wind profile\ndf = DataFrame(Tair=[25,25,25],pressure=100,wind=[3,4,5],ustar=[0.5,0.6,0.65],H=200)\nroughness_parameters(Val(:wind_profile),df;zh,zr=40,d=0.7*zh)\n\n# assume d = 0.8*zh\nrp = roughness_parameters(Val(:wind_profile),df;zh,zr=40,d=0.8*zh)\nâ‰ˆ(rp.z0m, 0.55, rtol=0.1)\n\n\n\n\n\n","category":"function"},{"location":"surface_roughness/#Bigleaf.wind_profile","page":"-","title":"Bigleaf.wind_profile","text":"wind_profile(z::Number, ustar, d, z0m, psi_m = zero(z); constants)\nwind_profile(z, df::AbstractDataFrame, d, z0m, psi_m::AbstractVector; constants)\nwind_profile(z, df::DFTable, d, z0m; psi_m = nothing,\n  stab_formulation = Val(:Dyer_1970), constants)\n\nWind speed at a given height above the canopy estimated from single-level measurements of wind speed.\n\nArguments\n\nz         : Height above ground for which wind speed is calculated.\nustar     : Friction velocity (m s-1)\nd         : Zero-plane displacement height (-)\nz0m       : Roughness length (m)\nconstants=bigleaf_constants()\n\nFor DataFrame variant with supplying stability_parameter\n\ndf:         : DataFrame with columns \nustar     : Friction velocity (m s-1)\npsi_m     : value of the stability function for heat, see stability_correction Pass psi_m = 0.0 to neglect stability correction.\n\nFor DataFrame varinat where psi_m is to be estimated\n\nadditional columns in df:\nTair, pressure, H : see stability_correction\n\nDetails\n\nThe underlying assumption is the existence of a logarithmic wind profile above the height d + z0m (the height at which wind speed mathematically reaches zero according to the Monin-Obhukov similarity theory). In this case, the wind speed at a given height z is given by:\n\nu(z) = (ustark) * (ln((z - d)  z0m) - psi_m\n\nThe roughness parameters zero-plane displacement height (d) and roughness length (z0m) can be approximated from roughness_parameters.  psi_m is the stability correction. Set it to zero (not recommended) to neglect statbility correction. By default it is estimated from wind profile using stability_correction\n\nNote\n\nNote that this equation is only valid for z >= d + z0m, and it is not  meaningful to calculate values closely above d + z0m. All values in heights smaller than d + z0m will return 0. \n\nValue\n\nwind speed at given height z. \n\nReferences\n\nMonteith, JL., Unsworth, MH., 2008: Principles of Environmental Physics. 3rd edition. Academic Press, London. \nNewman, JF., Klein, PM., 2014: The impacts of atmospheric stability on the accuracy of wind speed extrapolation methods. Resources 3, 81-105.\n\nSee also\n\nroughness_parameters\n\nusing DataFrames\nheights = 18:2:40  # heights above ground for which to calculate wind speed\ndf = DataFrame(Tair=25,pressure=100,wind=[3,4,5],ustar=[0.5,0.6,0.65],H=[200,230,250]) \nzr=40;zh=25;d=16\n# z0m and MOL are independent of height, compute before\nMOL = Monin_Obukhov_length.(df.Tair, df.pressure, df.ustar, df.H)\nz0m = roughness_parameters(\n  Val(:wind_profile), df.ustar, df.wind, df.Tair, df.pressure, df.H; zh, zr).z0m \nws = map(heights) do z\n  wind_profile(z,df,d,z0m; MOL)\nend\nusing Plots # plot wind profiles for the three rows in df\nplot(first.(ws), heights, ylab = \"height (m)\", xlab = \"wind speed (m/s)\", legend=:topleft)\nplot!(getindex.(ws, 2), heights)\nplot!(getindex.(ws, 3), heights)\nnothing\n# output\n\n\n\n\n\n","category":"function"},{"location":"global_radiation/#Global-radiation","page":"-","title":"Global radiation","text":"","category":"section"},{"location":"global_radiation/","page":"-","title":"-","text":"Pages = [\"global_radiation.md\",]","category":"page"},{"location":"global_radiation/","page":"-","title":"-","text":"potential_radiation\nextraterrestrial_radiation\ncalc_sun_position_hor\ncalc_sun_position_MOD","category":"page"},{"location":"global_radiation/#Bigleaf.potential_radiation","page":"-","title":"Bigleaf.potential_radiation","text":"potential_radiation(datetime, lat, long)\npotential_radiation(doy, hour, lat, long; timezone,year)\n\nCompute potential radiation for given geolocation and time.\n\nBecause potential radiation does not change across years  (for a given location and daytime and day of year), time can be specified alternatively by doy and hour.\n\nArguments\n\ndatetime:  UTC timestamp.\nlat:       Latitude (decimal degrees)\nlong:      Longitude (decimal degrees)\ndoy:       day of year (integer starting from 1)\nhour:      hour within the day (0.0 .. 24.0 float)\n\noptional     \n\ntimezone:  Timezone for doy and hour, defaults to \"GMT+x\"  nearest to given longitude.\nyear: specific year for doy and hour\n\nValue\n\nvector of potential radiation (W m-2)\n\nExamples\n\n# assume hours in the GMT+x that is closest to given longitude\npotrad = potential_radiation(160, 10.5, 51.0, 11.5)\n\n\n\n\n\npotential_radiation(datetime, lat, long)\npotential_radiation(doy, hour, lat, long; timezone,year)\n\nCompute potential radiation for given geolocation and time.\n\nBecause potential radiation does not change across years  (for a given location and daytime and day of year), time can be specified alternatively by doy and hour.\n\nArguments\n\ndatetime:  UTC timestamp.\nlat:       Latitude (decimal degrees)\nlong:      Longitude (decimal degrees)\ndoy:       day of year (integer starting from 1)\nhour:      hour within the day (0.0 .. 24.0 float)\n\noptional     \n\ntimezone:  Timezone for doy and hour, defaults to \"GMT+x\"  nearest to given longitude.\nyear: specific year for doy and hour\n\nValue\n\nvector of potential radiation (W m-2)\n\nExamples\n\n# assume hours in the GMT+x that is closest to given longitude\npotrad = potential_radiation(160, 10.5, 51.0, 11.5)\n\n\n\n\n\n","category":"function"},{"location":"global_radiation/#Bigleaf.extraterrestrial_radiation","page":"-","title":"Bigleaf.extraterrestrial_radiation","text":"extraterrestrial_radiation(doy::Number; ...)\nextraterrestrial_radiation(datetime::TimeType; ...)\n\nCompute the extraterrestrial solar radiation with the eccentricity correction. Computation follows Lanini, 2010 (Master thesis, Bern University).\n\nArguments\n\ndoy: integer vector with day of year (DoY)\n\noptional \n\nconstants=bigleaf_constants(): Dictionary with entries \nsolar_constant\nyear=2030: year to create timestamps. Due to precession results slightly change across decades.   \n\nValue\n\nnumeric vector of extraterrestrial radiation (W_m-2)\n\nExamples\n\nex_rad = extraterrestrial_radiation(1)\nâ‰ˆ(ex_rad, 1414, atol = 1)\n\n\n\n\n\nextraterrestrial_radiation(doy::Number; ...)\nextraterrestrial_radiation(datetime::TimeType; ...)\n\nCompute the extraterrestrial solar radiation with the eccentricity correction. Computation follows Lanini, 2010 (Master thesis, Bern University).\n\nArguments\n\ndoy: integer vector with day of year (DoY)\n\noptional \n\nconstants=bigleaf_constants(): Dictionary with entries \nsolar_constant\nyear=2030: year to create timestamps. Due to precession results slightly change across decades.   \n\nValue\n\nnumeric vector of extraterrestrial radiation (W_m-2)\n\nExamples\n\nex_rad = extraterrestrial_radiation(1)\nâ‰ˆ(ex_rad, 1414, atol = 1)\n\n\n\n\n\n","category":"function"},{"location":"global_radiation/#Bigleaf.calc_sun_position_hor","page":"-","title":"Bigleaf.calc_sun_position_hor","text":"calc_sun_position_hor(datetime, lat, long)\n\nCompute the Sun position at given time and observer coordinates in horizontal coordinates.\n\nArguments:\n\ndatetime: time: Either a ZonedDateTime, or DateTime assumed in UTC\nlat, long: latitude and longitude in degree\n\nValue\n\nNamedTuple: sun position with entries\n\naltitude: angle above the horizon [rad].\nazimuth: angle ange the horizon plane eastwards of north [rad]\nhourangle: [rad] as output by AstroLib.eq2hor  Seems to represent time [day/2pi] after solar noon.   Value at local timezone noon provdes (local time - solar time).\n\n\n\n\n\ncalc_sun_position_hor(datetime, lat, long)\n\nCompute the Sun position at given time and observer coordinates in horizontal coordinates.\n\nArguments:\n\ndatetime: time: Either a ZonedDateTime, or DateTime assumed in UTC\nlat, long: latitude and longitude in degree\n\nValue\n\nNamedTuple: sun position with entries\n\naltitude: angle above the horizon [rad].\nazimuth: angle ange the horizon plane eastwards of north [rad]\nhourangle: [rad] as output by AstroLib.eq2hor  Seems to represent time [day/2pi] after solar noon.   Value at local timezone noon provdes (local time - solar time).\n\n\n\n\n\n","category":"function"},{"location":"global_radiation/#Bigleaf.calc_sun_position_MOD","page":"-","title":"Bigleaf.calc_sun_position_MOD","text":"calc_sun_position_MOD(JD::Number)\n\nCompute the Sun position at the Julian Day JD.\n\nResults are represented in the Mean Equinox of Date (MOD), i.e. accounting for precession but not for nutation and smaller pertubation of the polar axes, in spherical ecliptic and equatorial coordinates.  The algorithm was adapted from [Vallado 2013, p. 277-279].\n\nArguments:\n\nJD: time given as Julian Day . \n\nValue\n\nNamedTuple: sun position where\n\nEcliptic coordinates (1:3)\nÎ»: Ecliptic longitude of the Sun [rad].\nÎ²: Ecliptic latitude of the Sun [rad] is assumed 0.\nr: Distance of the Sun from Earth [m].\nEquatorial coordinate (4:5)  \nÎ±: ascention [rad]\nÎ´: declination [rad]\nÏµ: Obliquity of the ecliptic [rad].\n\nReferences\n\nVallado, D. A (2013). Fundamentals of Astrodynamics and Applications.      Microcosm Press, Hawthorne, CA.\n\n\n\n\n\n","category":"function"},{"location":"autodocs/","page":"Index","title":"Index","text":"CurrentModule = Bigleaf","category":"page"},{"location":"autodocs/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"autodocs/","page":"Index","title":"Index","text":"","category":"page"},{"location":"autodocs/#Autodocs","page":"Index","title":"Autodocs","text":"","category":"section"},{"location":"autodocs/","page":"Index","title":"Index","text":"Modules = [Bigleaf]","category":"page"},{"location":"autodocs/#Bigleaf.ET_to_LE-Tuple{Any, Any}","page":"Index","title":"Bigleaf.ET_to_LE","text":"LE_to_ET(LE,Tair)\nET_to_LE(ET,Tair)\n\nConvert evaporative water flux from mass (ET=evapotranspiration)              to energy (LE=latent heat flux) units, or vice versa.\n\nArguments\n\nLE   Latent heat flux (W m-2)\nET   Evapotranspiration (kg m-2 s-1)\nTair Air temperature (deg C)\n\nDetails\n\nThe conversions are given by:\n\nET = LElambda\nLE = lambda ET\n\nwhere lambda is the latent heat of vaporization (J kg-1) as calculated by latent_heat_vaporization.\n\nExamples\n\n# LE of 200 Wm-2 and air temperature of 25degC\nET = LE_to_ET(200,25)\nâ‰ˆ(ET, 8.19e-5, atol =1e-7)\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.Esat_from_Tair-Tuple{Any}","page":"Index","title":"Bigleaf.Esat_from_Tair","text":"Esat_slope(Tair; Esat_formula, constants) \nEsat_from_Tair(Tair; Esat_formula, constants) \nEsat_from_Tair_deriv(Tair; Esat_formula, constants)\n\nSaturation Vapor Pressure (Esat) and Slope of the Esat Curve\n\nArguemtns\n\nTair:      Air temperature (deg C)\nEsat_formula=Val(:Sonntag_1990):   Esatformula to be used. Either   `Val(:Sonntag1990)(Default),Val(:Alduchov1996, orVal(:Allen1998)`.\nconstants=bigleaf_constants(): Dictionary with entry  :Pa2kPa \n\nDetails\n\nEsat (kPa) is calculated using the Magnus equation:\n\nEsat = a * exp((b * Tair) / (c + Tair)) / 1000 where the coefficients a, b, c take different values depending on the Esat_formula use The default values are from Sonntag 1990 (a=611.2, b=17.62, c=243.12). This versi of the Magnus equation is recommended by the WMO (WMO 2008; p1.4-29). Alternativel parameter values determined by Alduchov & Eskridge 1996 or Allen et al. 1998 can b used (see references). The slope of the Esat curve (Delta) is calculated as the first derivative of the function:\n\nDelta = dEsat over dTair\n\nValue\n\nEsat_from_Tair: Saturation vapor pressure (kPa)\nEsat_from_Tair_deriv: Slope of the saturation vapor pressure curve (kPa K-1)\nEsat_slope: A tuple of the two above values\n\nReferences\n\nSonntag D. 1990: Important new values of the physical constants of 1986, vapor  pressure formulations based on the ITS-90 and psychrometric formulae.  Zeitschrift fuer Meteorologie 70, 340-344.\n\nWorld Meteorological Organization 2008: Guide to Meteorological Instruments and Methods of Observation (WMO-No.8). World Meteorological Organization, Geneva. 7th Edition,\n\nAlduchov, O. A. & Eskridge, R. E., 1996: Improved Magnus form approximation of  saturation vapor pressure. Journal of Applied Meteorology, 35, 601-609\n\nAllen, R.G., Pereira, L.S., Raes, D., Smith, M., 1998: Crop evapotranspiration - Guidelines for computing crop water requirements - FAO irrigation and drainage paper 56, FAO, Rome.\n\nEsat_from_Tair(20.0)          # Esat in kPa\nEsat_from_Tair_deriv(20.0)    # its derivative to temperature in kPa K-1\nEsat_slope(20.0)              # both as a tuple\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.Esat_from_Tair_deriv-Tuple{Any}","page":"Index","title":"Bigleaf.Esat_from_Tair_deriv","text":"Esat_slope(Tair; Esat_formula, constants) \nEsat_from_Tair(Tair; Esat_formula, constants) \nEsat_from_Tair_deriv(Tair; Esat_formula, constants)\n\nSaturation Vapor Pressure (Esat) and Slope of the Esat Curve\n\nArguemtns\n\nTair:      Air temperature (deg C)\nEsat_formula=Val(:Sonntag_1990):   Esatformula to be used. Either   `Val(:Sonntag1990)(Default),Val(:Alduchov1996, orVal(:Allen1998)`.\nconstants=bigleaf_constants(): Dictionary with entry  :Pa2kPa \n\nDetails\n\nEsat (kPa) is calculated using the Magnus equation:\n\nEsat = a * exp((b * Tair) / (c + Tair)) / 1000 where the coefficients a, b, c take different values depending on the Esat_formula use The default values are from Sonntag 1990 (a=611.2, b=17.62, c=243.12). This versi of the Magnus equation is recommended by the WMO (WMO 2008; p1.4-29). Alternativel parameter values determined by Alduchov & Eskridge 1996 or Allen et al. 1998 can b used (see references). The slope of the Esat curve (Delta) is calculated as the first derivative of the function:\n\nDelta = dEsat over dTair\n\nValue\n\nEsat_from_Tair: Saturation vapor pressure (kPa)\nEsat_from_Tair_deriv: Slope of the saturation vapor pressure curve (kPa K-1)\nEsat_slope: A tuple of the two above values\n\nReferences\n\nSonntag D. 1990: Important new values of the physical constants of 1986, vapor  pressure formulations based on the ITS-90 and psychrometric formulae.  Zeitschrift fuer Meteorologie 70, 340-344.\n\nWorld Meteorological Organization 2008: Guide to Meteorological Instruments and Methods of Observation (WMO-No.8). World Meteorological Organization, Geneva. 7th Edition,\n\nAlduchov, O. A. & Eskridge, R. E., 1996: Improved Magnus form approximation of  saturation vapor pressure. Journal of Applied Meteorology, 35, 601-609\n\nAllen, R.G., Pereira, L.S., Raes, D., Smith, M., 1998: Crop evapotranspiration - Guidelines for computing crop water requirements - FAO irrigation and drainage paper 56, FAO, Rome.\n\nEsat_from_Tair(20.0)          # Esat in kPa\nEsat_from_Tair_deriv(20.0)    # its derivative to temperature in kPa K-1\nEsat_slope(20.0)              # both as a tuple\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.Esat_slope-Tuple{Number}","page":"Index","title":"Bigleaf.Esat_slope","text":"Esat_slope(Tair; Esat_formula, constants) \nEsat_from_Tair(Tair; Esat_formula, constants) \nEsat_from_Tair_deriv(Tair; Esat_formula, constants)\n\nSaturation Vapor Pressure (Esat) and Slope of the Esat Curve\n\nArguemtns\n\nTair:      Air temperature (deg C)\nEsat_formula=Val(:Sonntag_1990):   Esatformula to be used. Either   `Val(:Sonntag1990)(Default),Val(:Alduchov1996, orVal(:Allen1998)`.\nconstants=bigleaf_constants(): Dictionary with entry  :Pa2kPa \n\nDetails\n\nEsat (kPa) is calculated using the Magnus equation:\n\nEsat = a * exp((b * Tair) / (c + Tair)) / 1000 where the coefficients a, b, c take different values depending on the Esat_formula use The default values are from Sonntag 1990 (a=611.2, b=17.62, c=243.12). This versi of the Magnus equation is recommended by the WMO (WMO 2008; p1.4-29). Alternativel parameter values determined by Alduchov & Eskridge 1996 or Allen et al. 1998 can b used (see references). The slope of the Esat curve (Delta) is calculated as the first derivative of the function:\n\nDelta = dEsat over dTair\n\nValue\n\nEsat_from_Tair: Saturation vapor pressure (kPa)\nEsat_from_Tair_deriv: Slope of the saturation vapor pressure curve (kPa K-1)\nEsat_slope: A tuple of the two above values\n\nReferences\n\nSonntag D. 1990: Important new values of the physical constants of 1986, vapor  pressure formulations based on the ITS-90 and psychrometric formulae.  Zeitschrift fuer Meteorologie 70, 340-344.\n\nWorld Meteorological Organization 2008: Guide to Meteorological Instruments and Methods of Observation (WMO-No.8). World Meteorological Organization, Geneva. 7th Edition,\n\nAlduchov, O. A. & Eskridge, R. E., 1996: Improved Magnus form approximation of  saturation vapor pressure. Journal of Applied Meteorology, 35, 601-609\n\nAllen, R.G., Pereira, L.S., Raes, D., Smith, M., 1998: Crop evapotranspiration - Guidelines for computing crop water requirements - FAO irrigation and drainage paper 56, FAO, Rome.\n\nEsat_from_Tair(20.0)          # Esat in kPa\nEsat_from_Tair_deriv(20.0)    # its derivative to temperature in kPa K-1\nEsat_slope(20.0)              # both as a tuple\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.Gb_Choudhury-Tuple{}","page":"Index","title":"Bigleaf.Gb_Choudhury","text":"Gb_Choudhury(; leafwidth, LAI, wind_zh, constants)\nGb_Choudhury!(df; leafwidth, LAI, wind_zh, constants)\n\nEstimate the canopy boundary layer conductance  for heat transfer according to Choudhury & Monteith 1988.\n\nArguments\n\ndf               : DataFrame where Gb_h is to be added/updated\nleafwidth        : Leaf width (m)\nLAI              : One-sided leaf area index\nwind_zh          : Wind speed at canopy heihgt (m s-1), see wind_profile \nconstants=bigleaf_constants()\n\nValue\n\nsee compute_Gb!\n\nDetails\n\nBoundary layer conductance according to Choudhury & Monteith 1988 is given by:\n\nGb_h = LAI left( 2aalpha sqrtu(z_h)w (1-e^-alpha2)right)\n\nwhere alpha is modeled as an empirical relation to LAI (McNaughton & van den Hurk 1995):\n\nalpha = 439 - 397 e^-0258  LAI\n\nw is leafwidth and u(zh) is the wind speed at the canopy surface.\n\nIt can be approximated from measured wind speed at sensor height zr and a wind extinction  coefficient alpha: u(z_h) = u(z_r)  e^alpha(z_rz_h -1). However, here (if not explicitly given) it is estimated by wind_profile\n\nReferences\n\nChoudhury, B. J., Monteith J_L., 1988: A four-layer model for the heat budget of homogeneous land surfaces. Q. J. R. Meteorol. Soc. 114, 373-398.\nMcNaughton, K. G., Van den Hurk, BJJ_M., 1995: A 'Lagrangian' revision of the resistors in the two-layer model for calculating the energy budget of a plant canopy. Boundary-Layer Meteorology 74, 261-288.\nHicks, BB., Baldocchi, DD., Meyers, TP., Hosker, JR., Matt, D_R., 1987: A preliminary multiple resistance routine for deriving dry deposition velocities from measured quantities. Water, Air, and Soil Pollution 36, 311-330.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.Gb_Su-Tuple{Any, Any, Any}","page":"Index","title":"Bigleaf.Gb_Su","text":"Gb_Su(Tair,pressure,ustar; wind_zh, Dl, fc, N=2, Cd=0.2, hs=0.01, constants)\nGb_Su!(df; wind_zh, Dl, fc=nothing, N=2, Cd=0.2, hs=0.01, LAI, constants)\n\nEstimate Boundary Layer Conductance to heat transfer using the physically based  formulation according to Su et al. 2001. \n\nArguments\n\nTair      : Air temperature (degC)\npressure  : Atmospheric pressure (kPa)\nustar     : Friction velocity (m s-1)\ndf        : DataFrame or matrix containing the above variables\nDl        : Leaf characteristic dimension (m)\nfc        : Fractional vegetation cover 0-1\nLAI       : One-sided leaf area index (-) - alternative to fc.\nN         : Number of leaf sides participating in heat exchange (defaults to 2)\nCd        : Foliage drag coefficient (-)\nhs        : Roughness height of the soil (m)\nconstants=bigleaf_constants()\n\nValue\n\nsee compute_Gb!\n\nDetails\n\nThe formulation is based on the kB-1 model developed by Massman 1999.  Su et al. 2001 derived the following approximation:\n\nk_B1 = (k C_d f_c^2)  (4C_t u^*u(z_h)) + k_Bs-1(1 - f_c)^2\n\nIf f_c (fractional vegetation cover) is missing, it is estimated from LAI: f_c = 1 - e^-LAI2\n\nThe wind speed at the top of the canopy is calculated using function wind_profile.\n\nCt is the heat transfer coefficient of the leaf (Massman 1999):\n\nC_t = P_r^-23 R_eh^-12  N\n\nwhere P_r is the Prandtl number (set to 0.71),  and R_eh is the Reynolds number for leaves:\n\nR_eh = D_l  wind(z_h)  v\n\nk{Bs-1}, the k{B-1} value for bare soil surface, is calculated according  to Su et al. 2001:\n\nk_Bs-1 = 246(Re)^025 - ln(74)\n\nReferences\n\nSu, Z., Schmugge, T., Kustas, W. & Massman, W., 2001: An evaluation of two models for estimation of the roughness height for heat transfer between the land surface and the atmosphere. Journal of Applied Meteorology 40, 1933-1951.\nMassman, W., 1999: A model study of kB H- 1 for vegetated surfaces using localized near-field' Lagrangian theory. Journal of Hydrology 223, 27-43.\nHicks, BB., Baldocchi, DD., Meyers, TP., Hosker, JR., Matt, D_R., 1987:  A preliminary multiple resistance routine for deriving dry deposition velocities from measured quantities. Water, Air, and Soil Pollution 36, 311-330.\n\nusing DataFrames\ndf = DataFrame(Tair=25,pressure=100,wind=[3,4,5],ustar=[0.5,0.6,0.65],H=[200,230,250]) \nzh = 25; zr = 40\nz0m = roughness_parameters(\n  Val(:wind_profile), df.ustar, df.wind, df.Tair, df.pressure, df.H; zh, zr).z0m \nwind_zh = wind_profile(zh, df, 0.7*zh, z0m)\ncompute_Gb!(df,Val(:Su_2001); wind_zh, Dl=0.01, LAI=5)\n# the same meteorological conditions, but larger leaves\ncompute_Gb!(df,Val(:Su_2001); wind_zh, Dl=0.1,LAI=5)\n# same conditions, large leaves, and sparse canopy cover (LAI = 1.5)\ncompute_Gb!(df,Val(:Su_2001); wind_zh, Dl=0.1,LAI=1.5)\nâ‰ˆ(df.Gb_h[1], 0.0638, rtol=1e-3)\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.Gb_Thom-Tuple{Union{Missing, Number}}","page":"Index","title":"Bigleaf.Gb_Thom","text":"Gb_Thom(ustar; constants)\ncompute_Gb!(df, Val{:Thom_1972})\n\nBoundary Layer Conductance according to Thom 1972, an empirical formulation for the  for heat transfer based on a simple ustar (friction velocity) dependency.\n\nArguments\n\nustar     : Friction velocity (m s-1)\ndf        : DataFrame with above variables\nconstants=bigleaf_constants()\n\nDetails\n\nThe empirical equation for Rb suggested by Thom 1972 is:\n\nRb = 62 u^*^-067\n\nGb (=1/Rb) for water vapor and heat are assumed to be equal in this package.\n\nValue\n\nsee compute_Gb!\n\nReferences\n\nThom, A., 1972: Momentum, mass and heat exchange of vegetation. Quarterly Journal of the Royal Meteorological Society 98, 124-134.\nHicks, BB., Baldocchi, DD., Meyers, TP., Hosker, JR., Matt, D_R., 1987: A preliminary multiple resistance routine for deriving dry deposition velocities from measured quantities. Water, Air, and Soil Pollution 36, 311-330.\n\nusing DataFrames\ndf = DataFrame(ustar = SA[0.1,missing,0.3])\ncompute_Gb!(df, Val(:Thom_1972))\npropertynames(df) == [:ustar, :Gb_h]\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.Gb_constant_kB1-Tuple{Any, Any}","page":"Index","title":"Bigleaf.Gb_constant_kB1","text":"Gb_constant_kB1(ustar, kB_h; constants)\ncompute_Gb!(df, Val{:constant_kB1})\n\nBoundary Layer Conductance using constant kB-1 value for heat transfer.\n\nArguments\n\nustar     : Friction velocity (m s-1)\ndf        : DataFrame with above variables\nkB_h      : kB-1 value for heat transfer\nconstants=bigleaf_constants()\n\nDetails\n\nRbh computed by ``kBh/(k * ustar)``, where k is the von Karman constant.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.LE_to_ET-Tuple{Any, Any}","page":"Index","title":"Bigleaf.LE_to_ET","text":"LE_to_ET(LE,Tair)\nET_to_LE(ET,Tair)\n\nConvert evaporative water flux from mass (ET=evapotranspiration)              to energy (LE=latent heat flux) units, or vice versa.\n\nArguments\n\nLE   Latent heat flux (W m-2)\nET   Evapotranspiration (kg m-2 s-1)\nTair Air temperature (deg C)\n\nDetails\n\nThe conversions are given by:\n\nET = LElambda\nLE = lambda ET\n\nwhere lambda is the latent heat of vaporization (J kg-1) as calculated by latent_heat_vaporization.\n\nExamples\n\n# LE of 200 Wm-2 and air temperature of 25degC\nET = LE_to_ET(200,25)\nâ‰ˆ(ET, 8.19e-5, atol =1e-7)\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.Monin_Obukhov_length-NTuple{4, Any}","page":"Index","title":"Bigleaf.Monin_Obukhov_length","text":"Monin_Obukhov_length(Tair, pressure, ustar, H; constants)\nMonin_Obukhov_length!(df;constants=bigleaf_constants())\nMonin_Obukhov_length(df;constants=bigleaf_constants())\n\ncalculates the Monin-Obukhov length.\n\nArguments\n\nTair      : Air temperature (degC)\npressure  : Atmospheric pressure (kPa)\nustar     : Friction velocity (m s-1)\nH         : Sensible heat flux (W m-2)\ndf        : DataFrame containing the above variables\n\noptional\n\nconstants=bigleaf_constants(): Dictionary with entries \nKelvin - conversion degree Celsius to Kelvin \ncp - specific heat of air for constant pressure (J K-1 1) \nk - von Karman constant (-) \ng - gravitational acceleration (m s-2)\n\nDetails\n\nThe Monin-Obukhov length (L) is given by:\n\nL = - (rho * cp * ustar^3 * Tair)  (k * g * H)\n\nwhere rho is air density (kg m-3).\n\nNote\n\nNote that L gets very small for very low ustar values with implications for subsequent functions using L as input. It is recommended to filter data and exclude low ustar values (ustar < ~0.2) beforehand. \n\nValue\n\nMonin-Obukhov length L (m). The non-mutating DataFrame variant returns a vector, the mutating variant add or modifies column :MOL.\n\nReferences\n\nFoken, T, 2008: Micrometeorology. Springer, Berlin, Germany. \n\nSee also\n\nstability_parameter\n\nMonin_Obukhov_length(\n  Tair=25,pressure=100,\n  ustar=seq(0.2,1,0.1),H=seq(40,200,20))\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.PPFD_to_Rg","page":"Index","title":"Bigleaf.PPFD_to_Rg","text":"Rg_to_PPFD(Rg,J_to_mol=4.6,frac_PAR=0.5)\nPPFD_to_Rg(PPFD,J_to_mol=4.6,frac_PAR=0.5)\n\nConversions between Global Radiation (W m-2) and Photosynthetic Photon Flux  Density (umol m-2 s-1)\n\nArguments\n\nRg:       Global radiation = incoming short-wave radiation at the surface (W m-2)\nPPFD:     Photosynthetic photon flux density (umol m-2 s-1)\nJtomol: Conversion factor from J m-2 s-1 (= W m-2) to umol (quanta) m-2 s-1\nfrac_PAR: Fraction of incoming solar irradiance that is photosynthetical-           active radiation (PAR); defaults to 0.5\n\nDetails\n\nThe conversion is given by:\n\nPPFD = Rg * frac_PAR * J_to_mol\n\nby default, the combined conversion factor (frac_PAR * J_to_mol) is 2.3\n\nExamples\n\n# convert a measured incoming short-wave radiation of 500 Wm-2 to\n# PPFD in umol m-2 s-1 and backwards\nRg_to_PPFD(500)\nPPFD_to_Rg(1150)\n\n\n\n\n\n","category":"function"},{"location":"autodocs/#Bigleaf.Reynolds_Number-NTuple{4, Any}","page":"Index","title":"Bigleaf.Reynolds_Number","text":"Reynolds_Number(Tair,pressure,ustar,z0m; constants)\n\ncalculates the Roughness Reynolds Number.\n\nArguments\n\nTair      : Air temperature (deg C)\npressure  : Atmospheric pressure (kPa)\nustar     : Friction velocity (m s-1)\nz0m       : Roughness length (m)\n\noptional\n\nconstants=bigleaf_constants()\n\nDetails\n\nThe Roughness Reynolds Number is calculated as in Massman 1999a:      Re = z0m * ustar  v, where v is the kinematic viscosity (m2 s-1).\n\nValue\n\nRoughness Reynolds Number (-)\n\nReferences\n\nMassman, W_J., 1999a: A model study of kB H- 1 for vegetated surfaces using 'localized near-field' Lagrangian theory. Journal of Hydrology 223, 27-43.\n\nTair,pressure,ustar,z0m = 25,100,0.5,0.5\nR = Reynolds_Number(Tair,pressure,ustar,z0m)                             \nâ‰ˆ(R, 15870, rtol=1e-3)\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.Rg_to_PPFD","page":"Index","title":"Bigleaf.Rg_to_PPFD","text":"Rg_to_PPFD(Rg,J_to_mol=4.6,frac_PAR=0.5)\nPPFD_to_Rg(PPFD,J_to_mol=4.6,frac_PAR=0.5)\n\nConversions between Global Radiation (W m-2) and Photosynthetic Photon Flux  Density (umol m-2 s-1)\n\nArguments\n\nRg:       Global radiation = incoming short-wave radiation at the surface (W m-2)\nPPFD:     Photosynthetic photon flux density (umol m-2 s-1)\nJtomol: Conversion factor from J m-2 s-1 (= W m-2) to umol (quanta) m-2 s-1\nfrac_PAR: Fraction of incoming solar irradiance that is photosynthetical-           active radiation (PAR); defaults to 0.5\n\nDetails\n\nThe conversion is given by:\n\nPPFD = Rg * frac_PAR * J_to_mol\n\nby default, the combined conversion factor (frac_PAR * J_to_mol) is 2.3\n\nExamples\n\n# convert a measured incoming short-wave radiation of 500 Wm-2 to\n# PPFD in umol m-2 s-1 and backwards\nRg_to_PPFD(500)\nPPFD_to_Rg(1150)\n\n\n\n\n\n","category":"function"},{"location":"autodocs/#Bigleaf.VPD_to_e-Tuple{Any, Any}","page":"Index","title":"Bigleaf.VPD_to_e","text":"VPD_to_rH(VPD,Tair; ...)\nH_to_VPD(rH,Tair; ...)\ne_to_rH(e,Tair; ...)\nVPD_to_e(VPD,Tair; ...)\ne_to_VPD(e,Tair; ...)\ne_to_q(e,pressure; ...)\nq_to_e(q,pressure; ...)\nq_to_VPD(q,Tair,pressure; ...)\nVPD_to_q(VPD,Tair,pressure; ...)\n\nConversion between vapor pressure (e), vapor pressure deficit (VPD),              specific humidity (q), and relative humidity (rH).\n\nArguments\n\nTair:      Air temperature (deg C)\npressure:  Atmospheric pressure (kPa)\ne:         Vapor pressure (kPa)\nq:        Specific humidity (kg kg-1)\nVPD:       Vapor pressure deficit (kPa)\nrH:        Relative humidity (-)\n\nAll functions accept the optional arguemtns:\n\nEsat_formula: formula used in Esat_from_Tair\nconstants: dictionary from bigleaf_constants with entries eps and Pa2kPa\n\nRreferences\n\nFoken, T, 2008: Micrometeorology_ Springer, Berlin, Germany.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.VPD_to_q-Tuple{Any, Any, Any}","page":"Index","title":"Bigleaf.VPD_to_q","text":"VPD_to_rH(VPD,Tair; ...)\nH_to_VPD(rH,Tair; ...)\ne_to_rH(e,Tair; ...)\nVPD_to_e(VPD,Tair; ...)\ne_to_VPD(e,Tair; ...)\ne_to_q(e,pressure; ...)\nq_to_e(q,pressure; ...)\nq_to_VPD(q,Tair,pressure; ...)\nVPD_to_q(VPD,Tair,pressure; ...)\n\nConversion between vapor pressure (e), vapor pressure deficit (VPD),              specific humidity (q), and relative humidity (rH).\n\nArguments\n\nTair:      Air temperature (deg C)\npressure:  Atmospheric pressure (kPa)\ne:         Vapor pressure (kPa)\nq:        Specific humidity (kg kg-1)\nVPD:       Vapor pressure deficit (kPa)\nrH:        Relative humidity (-)\n\nAll functions accept the optional arguemtns:\n\nEsat_formula: formula used in Esat_from_Tair\nconstants: dictionary from bigleaf_constants with entries eps and Pa2kPa\n\nRreferences\n\nFoken, T, 2008: Micrometeorology_ Springer, Berlin, Germany.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.VPD_to_rH-Tuple{Any, Any}","page":"Index","title":"Bigleaf.VPD_to_rH","text":"VPD_to_rH(VPD,Tair; ...)\nH_to_VPD(rH,Tair; ...)\ne_to_rH(e,Tair; ...)\nVPD_to_e(VPD,Tair; ...)\ne_to_VPD(e,Tair; ...)\ne_to_q(e,pressure; ...)\nq_to_e(q,pressure; ...)\nq_to_VPD(q,Tair,pressure; ...)\nVPD_to_q(VPD,Tair,pressure; ...)\n\nConversion between vapor pressure (e), vapor pressure deficit (VPD),              specific humidity (q), and relative humidity (rH).\n\nArguments\n\nTair:      Air temperature (deg C)\npressure:  Atmospheric pressure (kPa)\ne:         Vapor pressure (kPa)\nq:        Specific humidity (kg kg-1)\nVPD:       Vapor pressure deficit (kPa)\nrH:        Relative humidity (-)\n\nAll functions accept the optional arguemtns:\n\nEsat_formula: formula used in Esat_from_Tair\nconstants: dictionary from bigleaf_constants with entries eps and Pa2kPa\n\nRreferences\n\nFoken, T, 2008: Micrometeorology_ Springer, Berlin, Germany.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.add_Ga!-Union{Tuple{N}, Tuple{AbstractDataFrame, Vararg{Pair, N}}} where N","page":"Index","title":"Bigleaf.add_Ga!","text":"add_Ga(Gb_h, Ga_m, Sc::Vararg{Pair,N}; constants)\nadd_Ga!(df::AbstractDataFrame, Sc; Gb_h = df.Gb_h, Ga_m = df.Ga.m, kwargs...)\n\ncompute additional aerodynamic conductance quantities for given Schmidt-numbers\n\nArguments\n\nGb_h     : Boundary layer conductance for heat transfer (m s-1)\nGa_m     : Aerodynamic conductance for momentum (m s-1)\nSc       : several Pair{Symbol,Number} Output name and Schmidt number of               additional conductances to be calculated\ndf       : DataFrame to add output columns               \n\noptional\n\nconstants=bigleaf_constants(): Dictionary with entries \nPr - Prandtl number \n\nDetails\n\nAerodynamic conductance is calculated as\n\nG_a_x = 1(1G_a_m + 1G_b_x)\n\nwhere Gb_x is the Boundary layer conductance for other quantities x is calculated  based on boundary layer for heat transfer, Schmidt-Number, and  Prantl number, as documented in add_Gb!.\n\nValue\n\na NameTuple or df with keys Ga_x where x are the keys in Sc and  corresponding aerodynamic conductances (m s-1).\n\nExamples\n\nusing DataFrames\ndf = DataFrame(Gb_h=[0.02, missing, 0.055], Ga_m = 1 ./ [0.03, 0.03, 0.03])\nadd_Ga!(df, :O2 => 0.84, :CH4 => 0.99)\npropertynames(df)[3:4] == [:Ga_O2, :Ga_CH4]\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.add_Gb!-Union{Tuple{N}, Tuple{AbstractDataFrame, Vararg{Pair, N}}} where N","page":"Index","title":"Bigleaf.add_Gb!","text":"add_Gb(Gb_h::Union{Missing,Number}, Sc::Vararg{Pair,N}; constants)\nadd_Gb!(df::AbstractDataFrame, Sc::Vararg{Pair,N}; Gb_h = df.Gb_h, kwargs...)\n\ncompute boundary layer conductance for additional quantities for given Schmidt-numbers\n\nArguments\n\nGb_h     : Boundary layer conductance for heat transfer (m s-1)\nSc       : several Pair{Symbol,Number} Output name and Schmidt number of               additional conductances to be calculated\ndf       : DataFrame to add output columns               \n\noptional\n\nconstants=bigleaf_constants(): Dictionary with entries \nPr - Prandtl number \n\nDetails\n\nBoundary layer conductance for other quantities x is calculated  based on boundary layer for heat transfer as (Hicks et al. 1987):\n\nGb_x = Gb_h  (Sc_x  Pr)^067\n\nwhere Sc_x is the Schmidt number of quantity x, and Pr is the Prandtl number (0.71).\n\nValue\n\na NameTuple or df with keys Gb_x where x are the keys in Sc and  corresponding boundary layer conductances (m s-1).\n\nExamples\n\nusing DataFrames\ndf = DataFrame(Gb_h=[0.02, missing, 0.055])\nadd_Gb!(df, :O2 => 0.84, :CH4 => 0.99)\npropertynames(df)[2:3] == [:Gb_O2, :Gb_CH4]\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.aerodynamic_conductance!-Tuple{Any}","page":"Index","title":"Bigleaf.aerodynamic_conductance!","text":"aerodynamic_conductance!(df; \n  Gb_model = Val(:Thom_1972), Ram_model = Val(:wind_zr),\n  zr=nothing,zh=nothing, d = isnothing(zh) ? nothing : 0.7*zh,\n  ...\n  )\n\nBulk aerodynamic conductance, including options for the boundary layer conductance formulation and stability correction functions.\n\nArguments\n\ndf: DataFrame with columns\nustar     : Friction velocity (m s-1)\nwind      : Wind speed at sensor height (m s-1)\nGb_model  : model for computing boundary layer conductance (see compute_Gb!)\nRam_model : model for computing aerodynamic resistance (see compute_Ram)\nzh        : canopy height (m)\nzr        : Instrument (reference) height (m)\n\nFurther required columns of df and keyword argument depend on Gb_model   (see compute_Gb!) and Ram_model (see compute_Ram).\n\nIf only columns ustar and wind are available, use default models  (Val(:Thom_1972) and Val(:wind_zr)).\n\nDetails\n\nAerodynamic conductance for heat (Ga_h) is calculated as:\n\nGa_h = 1  (Ra_m + Rb_h)\n\nwhere Ra_m is the aerodynamic resistance for momentum and Rb_h = 1Gb_h the  (quasi-laminar) canopy boundary layer resistance ('excess resistance') for heat.\n\nRa_m is computed and described with compute_Ram using model Ram_model.\n\nRb_h is computed and described with 1/compute_Gb! using a given Gb_model.\n\nValue\n\ncombined results of compute_Gb! and \n\nRa_m: Aerodynamic resistance for momentum transfer (s m-1)\nGa_m: Aerodynamic conductance for momentum transfer (m s-1)\nGa_h: Aerodynamic conductance for heat transfer (m s-1)\nRa_h: Aerodynamic resistance for heat transfer (s m-1)\nGa_CO2: Aerodynamic conductance for CO2 transfer (m s-1)\n\nNote\n\nThe roughness length for water and heat (z0h) can be computed by roughness_z0h.\n\nTODO check Input variables such as LAI, Dl, or zh can be either constants, or vary with time, i.e. are vectors of the same length as df.\n\nNote that boundary layer conductance to water vapor transfer (Gb_w) is often  assumed to equal Gb_h. This assumption is also made in Bigleaf.jl, for  example in the function surface_conductance.\n\nIf the roughness length for momentum (z0m) is not provided as input, it is estimated  using roughness_parameters, which estimates a single z0m  value for the entire time period. If a varying z0m value  (e.g. across seasons or years) is required, z0m should be provided as input argument.\n\nExamples\n\nusing DataFrames\ndf = DataFrame(Tair=25,pressure=100,wind=[3,4,5],\n  ustar=[0.5,0.6,0.65],H=[200,230,250])   \n# simple calculation of Ga  \naerodynamic_conductance!(df;Gb_model=Val(:Thom_1972)) \n# calculation of Ram using a model derived from the logarithmic wind profile\naerodynamic_conductance!(df;Gb_model=Val(:Thom_1972),Ram_model = Val(:wind_profile), \n  zr=40,zh=25,d=17.5,z0m=2) \n# simple calculation of Ga, but a physically based canopy boundary layer model\naerodynamic_conductance!(df,Gb_model=Val(:Su_2001),\n  zr=40,zh=25,d=17.5,Dl=0.05,N=2,fc=0.8)\nall(isfinite.(df.psi_h))\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.air_density-Tuple{Any, Any}","page":"Index","title":"Bigleaf.air_density","text":"air_density(Tair,pressure; ...)\n\nAir density of moist air from air temperature and pressure_\n\nArguments\n\nTair:      Air temperature (deg C)\npressure:  Atmospheric pressure (kPa)\n\noptional \n\nconstants=bigleaf_constants(): Dictionary with entries   Kelvin, kPa2Pa\n\nDetails\n\nAir density rho is calculated as:\n\nrho = pressure over Rd * Tair\n\nValue\n\nair density (kg m-3)\n\nExamples\n\n# air density at 25degC and standard pressure (101.325kPa)\nair_density(25,101.325)\n\nReferences\n\nFoken, T, 2008: Micrometeorology. Springer, Berlin, Germany.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.bigleaf_constants-Tuple{}","page":"Index","title":"Bigleaf.bigleaf_constants","text":"bigleaf_constants(;...)\n\nConstants Used in the Bigleaf.jl Package\n\nReturn a Dictionary Dict{Symbol, Real}. Default values can be overridden by the named arguments:\n\ncp           Specific heat of air for constant pressure (J K-1 kg-1)\nRgas         Universal gas constant (J mol-1 K-1)\nRv           Gas constant of water vapor (J kg-1 K-1) (Stull 1988 p.641)\nRd           Gas constant of dry air (J kg-1 K-1) (Foken p. 245)\nMd           Molar mass of dry air (kg mol-1)\nMw           Molar mass of water vapor (kg mol-1)\neps          Ratio of the molecular weight of water vapor to dry air (=Mw/Md)\ng            Gravitational acceleration (m s-2)\nsolar_constant Solar constant (W m-2)\npressure0    Reference atmospheric pressure at sea level (Pa)\nTair0        Reference air temperature (K)\nk            von Karman constant\nCmol         Molar mass of carbon (kg mol-1)\nOmol         Molar mass of oxygen (kg mol-1)\nH2Omol       Molar mass of water (kg mol-1)\nsigma        Stefan-Boltzmann constant (W m-2 K-4)\nPr           Prandtl number\nSc_CO2       Schmidt number for CO2\nKelvin       Conversion degree Celsius to Kelvin\nDwDc         Ratio of the molecular diffusivities for water vapor and CO2\ndays2seconds Seconds per day\nkPa2Pa       Conversion kilopascal (kPa) to pascal (Pa)\nPa2kPa       Conversion pascal (Pa) to kilopascal (kPa)\numol2mol     Conversion micromole (umol) to mole (mol)\nmol2umol     Conversion mole (mol) to micromole (umol)\nkg2g         Conversion kilogram (kg) to gram (g)\ng2kg         Conversion gram (g) to kilogram (kg)\nkJ2J         Conversion kilojoule (kJ) to joule (J)\nJ2kJ         Conversion joule (J) to kilojoule (kJ)\nse_median    Conversion standard error (SE) of the mean to SE of the median\nfrac2percent Conversion between fraction and percent\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.calc_sun_position_MOD-Tuple{Number}","page":"Index","title":"Bigleaf.calc_sun_position_MOD","text":"calc_sun_position_MOD(JD::Number)\n\nCompute the Sun position at the Julian Day JD.\n\nResults are represented in the Mean Equinox of Date (MOD), i.e. accounting for precession but not for nutation and smaller pertubation of the polar axes, in spherical ecliptic and equatorial coordinates.  The algorithm was adapted from [Vallado 2013, p. 277-279].\n\nArguments:\n\nJD: time given as Julian Day . \n\nValue\n\nNamedTuple: sun position where\n\nEcliptic coordinates (1:3)\nÎ»: Ecliptic longitude of the Sun [rad].\nÎ²: Ecliptic latitude of the Sun [rad] is assumed 0.\nr: Distance of the Sun from Earth [m].\nEquatorial coordinate (4:5)  \nÎ±: ascention [rad]\nÎ´: declination [rad]\nÏµ: Obliquity of the ecliptic [rad].\n\nReferences\n\nVallado, D. A (2013). Fundamentals of Astrodynamics and Applications.      Microcosm Press, Hawthorne, CA.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.calc_sun_position_hor-Tuple{Dates.DateTime, Any, Any}","page":"Index","title":"Bigleaf.calc_sun_position_hor","text":"calc_sun_position_hor(datetime, lat, long)\n\nCompute the Sun position at given time and observer coordinates in horizontal coordinates.\n\nArguments:\n\ndatetime: time: Either a ZonedDateTime, or DateTime assumed in UTC\nlat, long: latitude and longitude in degree\n\nValue\n\nNamedTuple: sun position with entries\n\naltitude: angle above the horizon [rad].\nazimuth: angle ange the horizon plane eastwards of north [rad]\nhourangle: [rad] as output by AstroLib.eq2hor  Seems to represent time [day/2pi] after solar noon.   Value at local timezone noon provdes (local time - solar time).\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.calc_sun_position_hor-Tuple{TimeZones.ZonedDateTime, Any, Any}","page":"Index","title":"Bigleaf.calc_sun_position_hor","text":"calc_sun_position_hor(datetime, lat, long)\n\nCompute the Sun position at given time and observer coordinates in horizontal coordinates.\n\nArguments:\n\ndatetime: time: Either a ZonedDateTime, or DateTime assumed in UTC\nlat, long: latitude and longitude in degree\n\nValue\n\nNamedTuple: sun position with entries\n\naltitude: angle above the horizon [rad].\nazimuth: angle ange the horizon plane eastwards of north [rad]\nhourangle: [rad] as output by AstroLib.eq2hor  Seems to represent time [day/2pi] after solar noon.   Value at local timezone noon provdes (local time - solar time).\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.compute_Gb!-Tuple{AbstractDataFrame, Val{:Thom_1972}}","page":"Index","title":"Bigleaf.compute_Gb!","text":"compute_Gb!(df::AbstractDataFrame, approach; kwargs...)\n\nEstimate boundary layer conductance.\n\nArguments\n\ndf       : DataFrame with required variables (depend on approach)\napproach : one of\nVal(:Thom_1972): see Gb_Thom\nVal(:Choudhury_1988): see Gb_Choudhury\nVal(:Su_2001): see Gb_Su\nVal(:constant_kB1): see Gb_constant_kB1\n\nThe different approaches require different variables to be present in df and different keyword arguments.\n\nValue\n\nupdated DataFrame df with the following columns:\n\nGb_h: Boundary layer conductance for heat transfer (m s-1)\n\nTo subsequently derived quantities see\n\ncompute_Gb_quantities for Resistance, kB-1 constant, and CO2 conductance\nadd_Gb! for conductances of other species given their Schmidt numbers.\n\nSee also\n\nGb_Thom, Gb_Choudhury, Gb_Su, Gb_constant_kB1,  aerodynamic_conductance!\n\nusing DataFrames\ndf = DataFrame(wind=[3,4,5], ustar=[0.5,0.6,0.65]) \ncompute_Gb!(df, Val(:Thom_1972))\nâ‰ˆ(df.Gb_h[1], 0.102, rtol=1e-2)\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.compute_Gb_quantities-Tuple{Any, Any}","page":"Index","title":"Bigleaf.compute_Gb_quantities","text":"compute_Gb_quantities(Gb_h)\ncompute_Gb_quantities!(df:::AbstractDataFrame)\n\nBased on boundary layer conductance for heat, compute derived quantities.\n\nArguments\n\nGb_h : Boundary layer conductance for heat transfer (m s-1)\ndf   : DataFrame with above columns\nconstants=bigleaf_constants(): entries Sc_CO2 and Pr\n\nValue\n\nNamedTuple with entries\n\nGb_h: Boundary layer conductance for heat transfer (m s-1)\nRb_h: Boundary layer resistance for heat transfer (s m-1)\nkB_h: kB-1 parameter for heat transfer\nGb_CO2: Boundary layer conductance for CO2 (m s-1). \n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.compute_Ram-Tuple{Val{:wind_profile}, Union{Missing, Number}}","page":"Index","title":"Bigleaf.compute_Ram","text":"compute_Ram(::Val{:wind_profile}, ustar; \n  zr, d, z0m, psi_h, constants=bigleaf_constants())\ncompute_Ram!(df, method::Val{:wind_profile};  \n  zr, d, z0m, psi_h = df.psi_h, kwargs...)\n\ncompute_Ram(::Val{:wind_zr}, ustar, wind)\ncompute_Ram!(df, method::Val{:wind_zr}; kwargs...)\n\nEstimate bulk aerodynamic conductance.\n\nArguments\n\nustar          : Friction velocity (m s-1)\ndf             : DataFrame with above columns\nzr             : Instrument (reference) height (m)\nd              : Zero-plane displacement height (-), can be estimated using                      roughness_parameters\nz0m            : Roughness length for momentum (m). Can be estimated using                     from roughness_parameters  \npsi_h          : the value of the stability function for heat and water vapor (-)                    see stability_correction\n\nDetails\n\nThe aerodynamic resistance for momentum R_a_m is given by (Ram_method = Val(:wind_zr)):\n\nR_a_m = uu^*^2\n\nWhere u is the horizontal wind velocity.  Note that this formulation accounts for changes in atmospheric stability, and does not  require an additional stability correction function. \n\nAn alternative method to calculate Ra_m is provided (Ram_method = Val(:wind_profile)):\n\nR_a_m = (ln((z_r - d)z_0m) - psi_h)  (k  u^*)\n\nIf the roughness parameters z0m and d are unknown, they can be estimated using roughness_parameters. The argument stab_formulation determines the stability  correction function used to account for the effect of atmospheric stability on Ra_m  (Ra_m is lower for unstable and higher for stable stratification). Stratification is based  on a stability parameter zeta zeta=(z-dL), where z is the height,  d the zero-plane displacement height, and L the Monin-Obukhov length, calculated with  Monin_Obukhov_length The stability correction function is chosen by the argument stab_formulation.  Options are Val(:Dyer_1970) and Val(:Businger_1971) and Val(:no_stability_correction).\n\nNote\n\nFor adding aerodynamic conductance for other species see add_Ga!.\n\nValue\n\nAerodynamic resistance for momentum transfer (s m-1) (Ra_m)\n\nReferences\n\nVerma, S., 1989: Aerodynamic resistances to transfers of heat, mass and momentum. In: Estimation of areal evapotranspiration, IAHS Pub, 177, 13-20.\nVerhoef, A., De Bruin, H., Van Den Hurk, B., 1997: Some practical notes on the parameter kB-1 for sparse vegetation. Journal of Applied Meteorology, 36, 560-572.\nHicks, BB., Baldocchi, DD., Meyers, TP., Hosker, JR., Matt, D_R., 1987: A preliminary multiple resistance routine for deriving dry deposition velocities from measured quantities. Water, Air, and Soil Pollution 36, 311-330.\nMonteith, JL., Unsworth, MH., 2008: Principles of environmental physics. Third Edition. Elsevier Academic Press, Burlington, USA. \n\nSee also\n\naerodynamic_conductance!, add_Ga!\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.decoupling-Tuple{}","page":"Index","title":"Bigleaf.decoupling","text":"TODO; implement decoupling.\n\nThis stub is there to satisfy links im Help-pages.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.dew_point-Tuple{Any, Any}","page":"Index","title":"Bigleaf.dew_point","text":"dew_point(Tair,VPD; ...)\ndew_point_from_e(ea; ...)\n\nCalculate the dew point, the temperature to which air must be               cooled to become saturated (ie e = Esat(Td))\n\nArguments\n\nTair:     Air temperature (degC)\nVPD:      Vapor pressure deficit (kPa)\nea:       actual water vapor pressure (kPa)\n\noptional\n\naccuracy = 1e-03: Accuracy of the result (deg C)\nEsat_formula: formula used in Esat_from_Tair\nconstants=bigleaf_constants(): Dictionary with entries    Pa2kPa \n\nDetails\n\nDew point temperature (Td) is defined by the temperature for which saturaed vapour pressure equals current vapour pressure, i.e. below which  water would start to condensate.\n\ne = Esat(Td)\n\nwhere e is vapor pressure of the air and Esat is the vapor pressure deficit.          This equation is solved for Td by optimization.\n\nValue\n\ndew point temperature (degC)\n\nReferences\n\nMonteith J.L., Unsworth M.H., 2008: Principles of Environmental Physics.             3rd edition. Academic Press, London.\n\nExamples\n\nTair = 20.0\nVPD = 1.5\nTd = dew_point(Tair, VPD; accuracy = 1e-2)                \n(e = VPD_to_e(VPD,Tair), esat_Td = Esat_from_Tair(Td))\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.dew_point_from_e-Tuple{Any}","page":"Index","title":"Bigleaf.dew_point_from_e","text":"dew_point(Tair,VPD; ...)\ndew_point_from_e(ea; ...)\n\nCalculate the dew point, the temperature to which air must be               cooled to become saturated (ie e = Esat(Td))\n\nArguments\n\nTair:     Air temperature (degC)\nVPD:      Vapor pressure deficit (kPa)\nea:       actual water vapor pressure (kPa)\n\noptional\n\naccuracy = 1e-03: Accuracy of the result (deg C)\nEsat_formula: formula used in Esat_from_Tair\nconstants=bigleaf_constants(): Dictionary with entries    Pa2kPa \n\nDetails\n\nDew point temperature (Td) is defined by the temperature for which saturaed vapour pressure equals current vapour pressure, i.e. below which  water would start to condensate.\n\ne = Esat(Td)\n\nwhere e is vapor pressure of the air and Esat is the vapor pressure deficit.          This equation is solved for Td by optimization.\n\nValue\n\ndew point temperature (degC)\n\nReferences\n\nMonteith J.L., Unsworth M.H., 2008: Principles of Environmental Physics.             3rd edition. Academic Press, London.\n\nExamples\n\nTair = 20.0\nVPD = 1.5\nTd = dew_point(Tair, VPD; accuracy = 1e-2)                \n(e = VPD_to_e(VPD,Tair), esat_Td = Esat_from_Tair(Td))\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.e_to_VPD-Tuple{Any, Any}","page":"Index","title":"Bigleaf.e_to_VPD","text":"VPD_to_rH(VPD,Tair; ...)\nH_to_VPD(rH,Tair; ...)\ne_to_rH(e,Tair; ...)\nVPD_to_e(VPD,Tair; ...)\ne_to_VPD(e,Tair; ...)\ne_to_q(e,pressure; ...)\nq_to_e(q,pressure; ...)\nq_to_VPD(q,Tair,pressure; ...)\nVPD_to_q(VPD,Tair,pressure; ...)\n\nConversion between vapor pressure (e), vapor pressure deficit (VPD),              specific humidity (q), and relative humidity (rH).\n\nArguments\n\nTair:      Air temperature (deg C)\npressure:  Atmospheric pressure (kPa)\ne:         Vapor pressure (kPa)\nq:        Specific humidity (kg kg-1)\nVPD:       Vapor pressure deficit (kPa)\nrH:        Relative humidity (-)\n\nAll functions accept the optional arguemtns:\n\nEsat_formula: formula used in Esat_from_Tair\nconstants: dictionary from bigleaf_constants with entries eps and Pa2kPa\n\nRreferences\n\nFoken, T, 2008: Micrometeorology_ Springer, Berlin, Germany.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.e_to_q-Tuple{Any, Any}","page":"Index","title":"Bigleaf.e_to_q","text":"VPD_to_rH(VPD,Tair; ...)\nH_to_VPD(rH,Tair; ...)\ne_to_rH(e,Tair; ...)\nVPD_to_e(VPD,Tair; ...)\ne_to_VPD(e,Tair; ...)\ne_to_q(e,pressure; ...)\nq_to_e(q,pressure; ...)\nq_to_VPD(q,Tair,pressure; ...)\nVPD_to_q(VPD,Tair,pressure; ...)\n\nConversion between vapor pressure (e), vapor pressure deficit (VPD),              specific humidity (q), and relative humidity (rH).\n\nArguments\n\nTair:      Air temperature (deg C)\npressure:  Atmospheric pressure (kPa)\ne:         Vapor pressure (kPa)\nq:        Specific humidity (kg kg-1)\nVPD:       Vapor pressure deficit (kPa)\nrH:        Relative humidity (-)\n\nAll functions accept the optional arguemtns:\n\nEsat_formula: formula used in Esat_from_Tair\nconstants: dictionary from bigleaf_constants with entries eps and Pa2kPa\n\nRreferences\n\nFoken, T, 2008: Micrometeorology_ Springer, Berlin, Germany.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.e_to_rH-Tuple{Any, Any}","page":"Index","title":"Bigleaf.e_to_rH","text":"VPD_to_rH(VPD,Tair; ...)\nH_to_VPD(rH,Tair; ...)\ne_to_rH(e,Tair; ...)\nVPD_to_e(VPD,Tair; ...)\ne_to_VPD(e,Tair; ...)\ne_to_q(e,pressure; ...)\nq_to_e(q,pressure; ...)\nq_to_VPD(q,Tair,pressure; ...)\nVPD_to_q(VPD,Tair,pressure; ...)\n\nConversion between vapor pressure (e), vapor pressure deficit (VPD),              specific humidity (q), and relative humidity (rH).\n\nArguments\n\nTair:      Air temperature (deg C)\npressure:  Atmospheric pressure (kPa)\ne:         Vapor pressure (kPa)\nq:        Specific humidity (kg kg-1)\nVPD:       Vapor pressure deficit (kPa)\nrH:        Relative humidity (-)\n\nAll functions accept the optional arguemtns:\n\nEsat_formula: formula used in Esat_from_Tair\nconstants: dictionary from bigleaf_constants with entries eps and Pa2kPa\n\nRreferences\n\nFoken, T, 2008: Micrometeorology_ Springer, Berlin, Germany.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.equilibrium_imposed_ET-NTuple{5, Any}","page":"Index","title":"Bigleaf.equilibrium_imposed_ET","text":"equilibrium_imposed_ET(Tair,pressure,VPD,Gs, Rn; ...)\nequilibrium_imposed_ET!(df; ...)\n\nEvapotranspiration (ET) split up into imposed ET and equilibrium ET.\n\nArgumens\n\nTair      : Air temperature (deg C)\npressure  : Atmospheric pressure (kPa)\nVPD       : Air vapor pressure deficit (kPa)\nGs        : surface conductance to water vapor (m s-1)\nRn        : Net radiation (W m-2)\n\noptional : \n\nG=0       : Ground heat flux (W m-2)\nS=0       : Sum of all storage fluxes (W m-2)\nEsat_formula=Val(:Sonntag_1990): formula used in Esat_from_Tair\nconstants=bigleaf_constants(): pysical constants (cp, eps)\n\nDetails\n\nTotal evapotranspiration can be written in the form (Jarvis & McNaughton 6):\n\nET = Omega mathitET_eq + (1 - Omega) mathitET_imp\n\nwhere Omega is the decoupling coefficient as calculated from decoupling. ET_eq is the equilibrium evapotranspiration i.e., the ET rate that would occur under uncoupled conditions, where the budget is dominated by radiation (when Ga -> 0):\n\nET_eq = (Delta  (R_n - G - S)  lambda)  ( Delta gamma)\n\nwhere Delta is the slope of the saturation vapor pressur(kPa K-1), lambda is the latent heat of vaporization (J kg-1), and gamma is the psychrometric constant (kPa K-1). ET_imp is the imposed evapotranspiration rate, the ET rate that would occur under fully coupled conditions (when Ga -> inf):\n\nET_imp = (rho  c_p  mathitVPD  G_s  lambda)  gamma\n\nwhere rho is the air density (kg m-3).\n\nValue\n\nA NamedTuple or DataFrame with the following columns:\n\nET_eq: Equilibrium ET (kg m-2 s-1)\nET_imp: Imposed ET (kg m-2 s-1)\nLE_eq: Equilibrium LE (W m-2)\nLE_imp: Imposed LE (W m-2)      \n\nReferences\n\nJarvis, PG., McNaughton, KG., 1986: Stomatal control of transpiration: scaling up from leaf to region. Advances in Ecological Rese1-49.\nMonteith, JL., Unsworth, MH., 2008: Principles of ironmPhysics. 3rd edition. Academic Press, London. \n\nExamples\n\nTair,pressure,Rn, VPD, Gs = 20.0,100.0,50.0, 0.5, 0.01\nET_eq, ET_imp, LE_eq, LE_imp = equilibrium_imposed_ET(Tair,pressure,VPD,Gs, Rn)    \nâ‰ˆ(ET_eq, 1.399424e-05; rtol = 1e-5)\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.extraterrestrial_radiation-Tuple{Dates.TimeType}","page":"Index","title":"Bigleaf.extraterrestrial_radiation","text":"extraterrestrial_radiation(doy::Number; ...)\nextraterrestrial_radiation(datetime::TimeType; ...)\n\nCompute the extraterrestrial solar radiation with the eccentricity correction. Computation follows Lanini, 2010 (Master thesis, Bern University).\n\nArguments\n\ndoy: integer vector with day of year (DoY)\n\noptional \n\nconstants=bigleaf_constants(): Dictionary with entries \nsolar_constant\nyear=2030: year to create timestamps. Due to precession results slightly change across decades.   \n\nValue\n\nnumeric vector of extraterrestrial radiation (W_m-2)\n\nExamples\n\nex_rad = extraterrestrial_radiation(1)\nâ‰ˆ(ex_rad, 1414, atol = 1)\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.extraterrestrial_radiation-Tuple{Number}","page":"Index","title":"Bigleaf.extraterrestrial_radiation","text":"extraterrestrial_radiation(doy::Number; ...)\nextraterrestrial_radiation(datetime::TimeType; ...)\n\nCompute the extraterrestrial solar radiation with the eccentricity correction. Computation follows Lanini, 2010 (Master thesis, Bern University).\n\nArguments\n\ndoy: integer vector with day of year (DoY)\n\noptional \n\nconstants=bigleaf_constants(): Dictionary with entries \nsolar_constant\nyear=2030: year to create timestamps. Due to precession results slightly change across decades.   \n\nValue\n\nnumeric vector of extraterrestrial radiation (W_m-2)\n\nExamples\n\nex_rad = extraterrestrial_radiation(1)\nâ‰ˆ(ex_rad, 1414, atol = 1)\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.frac_hour-Tuple{Type{var\"#s3\"} where var\"#s3\"<:Dates.Period, Number}","page":"Index","title":"Bigleaf.frac_hour","text":"frac_hour(float::Number)\nfrac_hour(period::Type{<:Period}, float::Number)\n\nCreate a period in given type (defaults to Nanosecond) from fractional hours.\n\nusing Dates\nfrac_hour(1+1/60) == Hour(1) + Minute(1)\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.gC_to_umolCO2-Tuple{Any}","page":"Index","title":"Bigleaf.gC_to_umolCO2","text":"umolCO2_to_gC(CO2_flux; constants=bigleaf_constants())\ngC_to_umolCO2(C_flux; constants=bigleaf_constants())\n\nConvert CO2 quantities from (umol CO2 m-2 s-1) to (g C m-2 d-1) and vice versa.\n\nArguments\n\nCO2_flux  CO2 flux (umol CO2 m-2 s-1)\nC_flux    Carbon (C) flux (gC m-2 d-1)\nconstants: dictionary from bigleaf_constants with entries: Cmol, umol2mol, mol2umol, kg2g, g2kg, says2seconds\n\nExamples\n\numolCO2_to_gC(20)  # gC m-2 d-1\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.get_datetime_for_doy_hour","page":"Index","title":"Bigleaf.get_datetime_for_doy_hour","text":"get_datetime_for_doy_hour(doy, hour=12; year = 2030)\n\nCreate DateTime for given dayofyear and hour. Hour defaults to noon and year to 2030, a near future where earth axis  precession does not differ too much from year where the function  is called. Fractional hours can be provided.\n\nExamples\n\nget_datetime_for_doy_hour(2; year = 2021)\n# output\n2021-01-02T12:00:00\n\n\n\n\n\n","category":"function"},{"location":"autodocs/#Bigleaf.get_growingseason-Tuple{Any, Any}","page":"Index","title":"Bigleaf.get_growingseason","text":"get_growingseason(GPPd, tGPP; ws=15, min_int=5, warngap=true)\n\nFilters annual time series for growing season based on smoothed daily GPP data.\n\nArguments\n\nGPPd:    daily GPP (any unit) \ntGPP:    GPP threshold (fraction of 95th percentile of the GPP time series).              Takes values between 0 and 1. \n\noptional               \n\nws:      window size used for GPP time series smoothing\nmin_int: minimum time interval in days for a given state of growing season\nwarngap: set to false to suppress warning on too few non-missing data\n\nDetails\n\nThe basic idea behind the growing season filter is that vegetation is  considered to be active when its carbon uptake (GPP) is above a specified  threshold, which is defined relative to the peak GPP (95th percentile)  observed in the year.  The GPP-threshold is calculated as:\n\nGPP_threshold = quantile(GPPd095)*tGPP\n\nGPPd time series are smoothed with a moving average to avoid fluctuations  in the delineation of the growing season. The window size defaults to 15  days, but depending on the ecosystem, other values can be appropriate. \n\nThe argument min_int serves to avoid short fluctuations in the  status growing season vs. no growing season by defining a minimum length of the status. If a time interval shorter than min_int is labeled as growing season or non-growing season, it is changed to the status of  the neighboring values, i.e its opposite.\n\nValue\n\nA NamedTuple with entries\n\nis_growingseason: a BitVector of the same length as the input GPPd in which false  indicate no growing season (dormant season) and true indicate growing season.\nGPPd_smoothed: smoothed GPPd\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.get_nonoverlapping_periods-Tuple{DataFrame}","page":"Index","title":"Bigleaf.get_nonoverlapping_periods","text":"get_nonoverlapping_periods(dfo::DataFrame)\n\nGet non-overlapping periods.\n\nArguments\n\ndfo: DataFrame with columns p_start and p_end sorted by increasing p_start\n\nValue\n\nDataFrame with columns p_start and p_end with p_start[i] > p_end[i-1]\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.kg_to_mol","page":"Index","title":"Bigleaf.kg_to_mol","text":"kg_to_mol(mass, molarMass=bigleaf_constants()[:H2Omol])\n\nConversion between Mass (kg) and Molar Units (mol).\n\n\n\n\n\n","category":"function"},{"location":"autodocs/#Bigleaf.kinematic_viscosity-Tuple{Any, Any}","page":"Index","title":"Bigleaf.kinematic_viscosity","text":"kinematic_viscosity(Tair,pressure; ...)\n\nCalculate the kinematic viscosity of air.\n\nParameters\n\nTair      Air temperature (deg C)\npressure  Atmospheric pressure (kPa)\n\noptional \n\nconstants=bigleaf_constants(): Dictionary with entries    Kelvin, pressure0, Tair0, kPa2Pa\n\nDetails\n\nEq where v is the kinematic viscosity of the air (m2 s-1),           given by (Massman 1999b):\n\nv = 1327 * 10^-5(pressure0pressure)(TairTair0)^181\n\nValue\n\nkinematic viscosity of air (m2 s-1)\n\nReferences\n\nMassman, W.J., 1999b: Molecular diffusivities of Hg vapor in air,              O2 and N2 near STP and the kinematic viscosity and thermal diffusivity             of air near STP. Atmospheric Environment 33, 453-457.      \n\nExamples\n\nTair,pressure = 25,100\nvis = kinematic_viscosity(Tair,pressure)\nâ‰ˆ(vis, 1.58e-5, atol =1e-7)\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.latent_heat_vaporization-Tuple{Any}","page":"Index","title":"Bigleaf.latent_heat_vaporization","text":"latent_heat_vaporization(Tair)\n\nLatent heat of vaporization as a function of air temperature using \n\nlambda = (2501 - 000237  Tair) 10^6.\n\nArguments:\n\nTair:  Air temperature (deg C)\n\nValue\n\nlambda: Latent heat of vaporization (J kg-1) \n\nReferences\n\nStull, B, 1988: An Introduction to Boundary Layer Meteorology (p641)           Kluwer Academic Publishers, Dordrecht, Netherlands            \nFoken, T, 2008: Micrometeorology_ Springer, Berlin, Germany\n\nlatent_heat_vaporization.(5:5:45)        \n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.mol_to_ms-Tuple{Any, Any, Any}","page":"Index","title":"Bigleaf.mol_to_ms","text":"ms_to_mol(G_ms,Tair,pressure; constants=bigleaf_constants())\nmol_to_ms(G_mol,Tair,pressure; constants=bigleaf_constants())\n\nConverts conductances from mass (m s-1) to molar units (mol m-2 s-1), or vice versa\n\nDetails\n\nThe conversions are given by\n\nG_mol = G_ms   pressure  (Rgas  Tair)\nG_ms = G_mol   (Rgas  Tair)  pressure\n\nwhere Tair is in Kelvin and pressure in Pa (converted from kPa internally).\n\nReferences\n\nJones, HG 1992_ Plants and microclimate: a quantitative approach to    environmental plant physiology_   2nd Edition, Cambridge University Press, Cambridge 428 \n\nExamples\n\nG_ms,Tair,pressure = 0.005,25,100\nrmol = ms_to_mol(G_ms,Tair,pressure)\nâ‰ˆ(rmol, 0.2017, atol =1e-4)\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.moving_average-Tuple{Any, Any}","page":"Index","title":"Bigleaf.moving_average","text":"moving_average(vs,n; nmin = n Ã· 2)\n\nCompute the moving average over a vector allowing for missings.\n\nArguments\n\nvs: numeric vector to average over\nn: window size: number of items to average\nnmin: minimum number of non-missing records\n\nValues outside the edges are assumed missing.    \n\nIf the number of non-missing records within a window is smaller than nmin then the averaged value is assumed missing. This avoids average at edges of  periods with many missings to be very sensitive to the edge values.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.ms_to_mol-Tuple{Any, Any, Any}","page":"Index","title":"Bigleaf.ms_to_mol","text":"ms_to_mol(G_ms,Tair,pressure; constants=bigleaf_constants())\nmol_to_ms(G_mol,Tair,pressure; constants=bigleaf_constants())\n\nConverts conductances from mass (m s-1) to molar units (mol m-2 s-1), or vice versa\n\nDetails\n\nThe conversions are given by\n\nG_mol = G_ms   pressure  (Rgas  Tair)\nG_ms = G_mol   (Rgas  Tair)  pressure\n\nwhere Tair is in Kelvin and pressure in Pa (converted from kPa internally).\n\nReferences\n\nJones, HG 1992_ Plants and microclimate: a quantitative approach to    environmental plant physiology_   2nd Edition, Cambridge University Press, Cambridge 428 \n\nExamples\n\nG_ms,Tair,pressure = 0.005,25,100\nrmol = ms_to_mol(G_ms,Tair,pressure)\nâ‰ˆ(rmol, 0.2017, atol =1e-4)\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.potential_ET-Tuple{Val{:PriestleyTaylor}, Any, Any, Any}","page":"Index","title":"Bigleaf.potential_ET","text":"potential_ET(::Val{:PriestleyTaylor}, Tair, pressure, Rn; G=0.0, S=0.0, ...)\npotential_ET(::Val{:PriestleyTaylor}, Tair, pressure, Rn, G, S; ...)\n\npotential_ET(::Val{:PenmanMonteith}, Tair, pressure, Rn, VPD, Ga_h;\n  G=zero(Tair),S=zero(Tair), ...)\nfpotential_ET(::Val{:PenmanMonteith}, Tair, pressure, Rn, VPD, Ga_h, G, S; ...)\n\npotential_ET!(df, approach; ...)\n\nPotential evapotranspiration according to Priestley & Taylor 1972 or the Penman-Monteith equation with a prescribed surface conductance.\n\nArguments\n\nTair:      Air temperature (degC)\npressure:  Atmospheric pressure (kPa)\nRn:        Net radiation (W m-2)\nVPD:       Vapor pressure deficit (kPa)\nGa:        Aerodynamic conductance to heat/water vapor (m s-1)\ndf:        DataFrame with the above variables\napproach:  Approach used: Either Val(:PriestleyTaylor)  or Val(:PenmanMonteith).\n\noptional:\n\nG=0.0:         Ground heat flux (W m-2). Defaults to zero.\nS=0.0:         Sum of all storage fluxes (W m-2) . Defaults to zero.\nconstants=bigleaf_constants(): physical constants (cp, eps, Rd, Rgas)\n\nfor PriestleyTaylor:\n\nalpha = 1.26:   Priestley-Taylor coefficient\n\nfor PenmanMonteith:\n\nGs_pot = 0.6:    Potential/maximum surface conductance (mol m-2 s-1); \nEsat_formula: formula used in Esat_from_Tair\n\nDetails\n\nPotential evapotranspiration is calculated according to Priestley & Taylor, 1972 (approach = Val(:PriestleyTaylor):\n\nmathitLE_pot = (alpha  Delta  (Rn - G - S))  (Delta + gamma)\n\nalpha is the Priestley-Taylor coefficient, Delta is the slope  of the saturation vapor pressure curve (kPa K-1), and gamma is the  psychrometric constant (kPa K-1).\n\nIf approach = Val(:PenmanMonteith), potential evapotranspiration is calculated according to the Penman-Monteith equation:\n\nmathitLE_pot = (Delta  (R_n - G - S) + rho  c_p  mathitVPD  G_a)   (Delta + gamma  (1 + G_aG_s pot)\n\nwhere Delta is the slope of the saturation vapor pressure curve (kPa K-1), rho is the air density (kg m-3),  and gamma is the psychrometric constant (kPa K-1). The value of G_s pot is typically a maximum value of G_s observed at the site,  e.g. the 90^th percentile of G_s within the growing season.\n\nGround heat flux and storage heat flux G or S are provided as optional  arguments. In the input-explicit variants, they default to zero. In the data-frame arguments, they default to missing, which results in assuming them to be zero which is displayed in a log-message. Note that in difference ot the bigleaf R package, you explitly need to care for missing values (see examples).\n\nValue\n\nNamedTuple with the following entries:\n\nET_pot: Potential evapotranspiration (kg m-2 s-1)\nLE_pot: Potential latent heat flux (W m-2)\n\nReferences\n\nPriestley, CHB., Taylor, R_J., 1972: On the assessment of surface heat flux and evaporation using large-scale parameters. Monthly Weather Review 100, 81-92.  \nAllen, RG., Pereira LS., Raes D., Smith M., 1998: Crop evapotranspiration - Guidelines for computing crop water requirements - FAO Irrigation and drainage paper 56.\nNovick, K_A., et al. 2016: The increasing importance of atmospheric demand for ecosystem water and carbon fluxes. Nature Climate Change 6, 1023 - 1027.\n\nSee also\n\nsurface_conductance\n\nExamples\n\nCalculate potential ET of a surface that receives a net radiation of 500 Wm-2 using Priestley-Taylor:\n\nTair, pressure, Rn = 30.0,100.0,500.0\nET_pot, LE_pot = potential_ET(Val(:PriestleyTaylor), Tair, pressure, Rn)    \nâ‰ˆ(ET_pot, 0.000204; rtol = 1e-2)\n\nCalculate potential ET for a surface with known Gs (0.5 mol m-2 s-1) and Ga (0.1 m s-1) using Penman-Monteith:\n\nTair, pressure, Rn = 30.0,100.0,500.0\nVPD, Ga_h, Gs_pot = 2.0, 0.1, 0.5\nET_pot, LE_pot = potential_ET(\n  Val(:PenmanMonteith), Tair,pressure,Rn,VPD, Ga_h; Gs_pot)    \n# now cross-check with the inverted equation\nGs_ms, Gs_mol = surface_conductance(\n  Val(:PenmanMonteith), Tair,pressure,VPD,LE_pot,Rn,Ga_h)\nGs_mol â‰ˆ Gs_pot\n\nDataFrame variant with explicitly replacing missings using coalesce.:\n\nusing DataFrames\ndf = DataFrame(\n  Tair = 20.0:1.0:30.0,pressure = 100.0, Rn = 500.0, G = 105.0, VPD = 2.0, \n  Ga_h = 0.1) \nallowmissing!(df, Cols(:G)); df.G[1] = missing\n#\n# need to provide G explicitly\ndf_ET = potential_ET!(copy(df), Val(:PriestleyTaylor); G = df.G)    \nismissing(df_ET.ET_pot[1])\n#\n# use coalesce to replace missing values by zero\ndf_ET = potential_ET!(\n  copy(df), Val(:PriestleyTaylor); G = coalesce.(df.G, zero(df.G)))    \n!ismissing(df_ET.ET_pot[1])\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.potential_radiation-NTuple{4, Any}","page":"Index","title":"Bigleaf.potential_radiation","text":"potential_radiation(datetime, lat, long)\npotential_radiation(doy, hour, lat, long; timezone,year)\n\nCompute potential radiation for given geolocation and time.\n\nBecause potential radiation does not change across years  (for a given location and daytime and day of year), time can be specified alternatively by doy and hour.\n\nArguments\n\ndatetime:  UTC timestamp.\nlat:       Latitude (decimal degrees)\nlong:      Longitude (decimal degrees)\ndoy:       day of year (integer starting from 1)\nhour:      hour within the day (0.0 .. 24.0 float)\n\noptional     \n\ntimezone:  Timezone for doy and hour, defaults to \"GMT+x\"  nearest to given longitude.\nyear: specific year for doy and hour\n\nValue\n\nvector of potential radiation (W m-2)\n\nExamples\n\n# assume hours in the GMT+x that is closest to given longitude\npotrad = potential_radiation(160, 10.5, 51.0, 11.5)\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.potential_radiation-Tuple{Dates.TimeType, Any, Any}","page":"Index","title":"Bigleaf.potential_radiation","text":"potential_radiation(datetime, lat, long)\npotential_radiation(doy, hour, lat, long; timezone,year)\n\nCompute potential radiation for given geolocation and time.\n\nBecause potential radiation does not change across years  (for a given location and daytime and day of year), time can be specified alternatively by doy and hour.\n\nArguments\n\ndatetime:  UTC timestamp.\nlat:       Latitude (decimal degrees)\nlong:      Longitude (decimal degrees)\ndoy:       day of year (integer starting from 1)\nhour:      hour within the day (0.0 .. 24.0 float)\n\noptional     \n\ntimezone:  Timezone for doy and hour, defaults to \"GMT+x\"  nearest to given longitude.\nyear: specific year for doy and hour\n\nValue\n\nvector of potential radiation (W m-2)\n\nExamples\n\n# assume hours in the GMT+x that is closest to given longitude\npotrad = potential_radiation(160, 10.5, 51.0, 11.5)\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.pressure_from_elevation","page":"Index","title":"Bigleaf.pressure_from_elevation","text":"pressure_from_elevation(elev,Tair,VPD=missing;...)\n\nAn estimate of mean pressure at a given elevation as predicted by the              hypsometric equation.\n\nArguments\n\nelev:      Elevation asl_ (m)\nTair:      Air temperature (deg C)\nVPD:       Vapor pressure deficit (kPa); optional\n\noptional \n\nconstants=bigleaf_constants(): Dictionary with entries    Kelvin, pressure0, Rd, g, Pa2kPa\n\nDetails\n\nAtmospheric pressure is approximated by the hypsometric equation:\n\npressure = pressure_0  (exp(g * elevation  (Rd Temp)))\n\nThe hypsometric equation gives an estimate of the standard pressure       at a given altitude.       If VPD is provided, humidity correction is applied and the       virtual temperature instead of air temperature is used_ VPD is        internally converted to specific humidity.\n\nValue\n\nAtmospheric pressure (kPa)\n\nReferences\n\nStull B_, 1988: An Introduction to Boundary Layer Meteorology.             Kluwer Academic Publishers, Dordrecht, Netherlands.\n\nExamples\n\n# mean pressure at 500m altitude at 25 deg C and VPD of 1 kPa\npressure_from_elevation(500,25,1)\n\n\n\n\n\n","category":"function"},{"location":"autodocs/#Bigleaf.psychrometric_constant-Tuple{Any, Any}","page":"Index","title":"Bigleaf.psychrometric_constant","text":"psychrometric_constant(Tair,pressure; ...)\n\nComputes the psychrometric 'constant'.\n\nArgumens\n\nTair:      Air temperature (deg C)\npressure:  Atmospheric pressure (kPa)\n\noptional \n\nconstants=bigleaf_constants(): Dictionary with entries    cp, eps\n\nDetails\n\nThe psychrometric constant (gamma) is given as:\n\ngamma = cp * pressure  (eps * lambda)\n\nwhere lambda is the latent heat of vaporization (J kg-1),   as calculated from latent_heat_vaporization.\n\nValue\n\nthe psychrometric constant (kPa K-1)\n\nReferences\n\nMonteith J.L., Unsworth M.H., 2008: Principles of Environmental Physics.             3rd Edition. Academic Press, London.\n\nExamples\n\npsychrometric_constant.(5.0:5.0:25.0, 100)\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.q_to_VPD-Tuple{Any, Any, Any}","page":"Index","title":"Bigleaf.q_to_VPD","text":"VPD_to_rH(VPD,Tair; ...)\nH_to_VPD(rH,Tair; ...)\ne_to_rH(e,Tair; ...)\nVPD_to_e(VPD,Tair; ...)\ne_to_VPD(e,Tair; ...)\ne_to_q(e,pressure; ...)\nq_to_e(q,pressure; ...)\nq_to_VPD(q,Tair,pressure; ...)\nVPD_to_q(VPD,Tair,pressure; ...)\n\nConversion between vapor pressure (e), vapor pressure deficit (VPD),              specific humidity (q), and relative humidity (rH).\n\nArguments\n\nTair:      Air temperature (deg C)\npressure:  Atmospheric pressure (kPa)\ne:         Vapor pressure (kPa)\nq:        Specific humidity (kg kg-1)\nVPD:       Vapor pressure deficit (kPa)\nrH:        Relative humidity (-)\n\nAll functions accept the optional arguemtns:\n\nEsat_formula: formula used in Esat_from_Tair\nconstants: dictionary from bigleaf_constants with entries eps and Pa2kPa\n\nRreferences\n\nFoken, T, 2008: Micrometeorology_ Springer, Berlin, Germany.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.q_to_e-Tuple{Any, Any}","page":"Index","title":"Bigleaf.q_to_e","text":"VPD_to_rH(VPD,Tair; ...)\nH_to_VPD(rH,Tair; ...)\ne_to_rH(e,Tair; ...)\nVPD_to_e(VPD,Tair; ...)\ne_to_VPD(e,Tair; ...)\ne_to_q(e,pressure; ...)\nq_to_e(q,pressure; ...)\nq_to_VPD(q,Tair,pressure; ...)\nVPD_to_q(VPD,Tair,pressure; ...)\n\nConversion between vapor pressure (e), vapor pressure deficit (VPD),              specific humidity (q), and relative humidity (rH).\n\nArguments\n\nTair:      Air temperature (deg C)\npressure:  Atmospheric pressure (kPa)\ne:         Vapor pressure (kPa)\nq:        Specific humidity (kg kg-1)\nVPD:       Vapor pressure deficit (kPa)\nrH:        Relative humidity (-)\n\nAll functions accept the optional arguemtns:\n\nEsat_formula: formula used in Esat_from_Tair\nconstants: dictionary from bigleaf_constants with entries eps and Pa2kPa\n\nRreferences\n\nFoken, T, 2008: Micrometeorology_ Springer, Berlin, Germany.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.rH_to_VPD-Tuple{Any, Any}","page":"Index","title":"Bigleaf.rH_to_VPD","text":"VPD_to_rH(VPD,Tair; ...)\nH_to_VPD(rH,Tair; ...)\ne_to_rH(e,Tair; ...)\nVPD_to_e(VPD,Tair; ...)\ne_to_VPD(e,Tair; ...)\ne_to_q(e,pressure; ...)\nq_to_e(q,pressure; ...)\nq_to_VPD(q,Tair,pressure; ...)\nVPD_to_q(VPD,Tair,pressure; ...)\n\nConversion between vapor pressure (e), vapor pressure deficit (VPD),              specific humidity (q), and relative humidity (rH).\n\nArguments\n\nTair:      Air temperature (deg C)\npressure:  Atmospheric pressure (kPa)\ne:         Vapor pressure (kPa)\nq:        Specific humidity (kg kg-1)\nVPD:       Vapor pressure deficit (kPa)\nrH:        Relative humidity (-)\n\nAll functions accept the optional arguemtns:\n\nEsat_formula: formula used in Esat_from_Tair\nconstants: dictionary from bigleaf_constants with entries eps and Pa2kPa\n\nRreferences\n\nFoken, T, 2008: Micrometeorology_ Springer, Berlin, Germany.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.roughness_parameters-Tuple{Val{:canopy_height}, Any}","page":"Index","title":"Bigleaf.roughness_parameters","text":"roughness_parameters(::Val{:canopy_height}    , zh; frac_d=0.7, frac_z0m=0.1)\nroughness_parameters(::Val{:canopy_height_LAI}, zh, LAI; cd=0.2, hs=0.01)\nroughness_parameters(::Val{:wind_profile}     , ustar, wind, psi_m; \n  zh, zr, d = 0.7*zh, constants)\n\nroughness_parameters(method::Val{:wind_profile}, utar, wind, Tair, pressure, H; \n  zh, zr, d = 0.7*zh, stab_formulation=Val(:Dyer_1970), constants)\nroughness_parameters(method::Val{:wind_profile}, df::DFTable; ...)\n\nA approximations of the two roughness parameters displacement height (d) and roughness length for momentum (z0m).\n\nArguments\n\nzh        : Vegetation height (m)          \nconstants=bigleaf_constants(): \n\nBy canopy height:\n\nfrac_d    : Fraction of displacement height on canopy height (-)\nfrac_z0m  : Fraction of roughness length on canopy height (-)\n\nBy canopy height and LAI\n\nLAI       : Leaf area index (-) \ncd        : Mean drag coefficient for individual leaves. Defaults to 0.2. \nhs        : roughness length of the soil surface (m). \n\nBy wind profile\n\nwind      : Wind speed at height zr (m s-1)\nustar     : Friction velocity (m s-1)\nzr        : Instrument (reference) height (m)\nd         : Zero-plane displacement height (-)\npsi_m     : value of the stability function for heat, see stability_correction\n\nAnother variant estimates of psi_m by stability_correction, which requires further input arguments. For convenience, these arguments can be provided using a DataFrame, however, the result then is not type stable.\n\nDetails\n\nThe two main roughness parameters, the displacement height (d) and the roughness length for momentum (z0m) can be estimated from simple empirical relationships with canopy height (zh). If method = Val(:canopy_height), the following formulas are used:  \n\nd = frac_d * zh\n\nz0m = frac_z0m * zh\n\nwhere frac_d defaults to 0.7 and frac_z0m to 0.1.\n\nAlternatively, d and z0m can be estimated from both canopy height and LAI (If method = Val(:canopy_height_LAI)). Based on data from Shaw & Pereira 1982, Choudhury & Monteith 1988 proposed  the following semi-empirical relations:\n\nX = cd * LAI\n\nd = 11 * zh * ln(1 + X^14) \n\nz0m = hs + 03 * zh * X^12   for 0 = X = 02\n\nz0m = hs * zh * (1 - dzh)   for 02  X \n\nIf method = Val(:wind_profile), z0m is estimated by solving the wind speed profile for z0m:\n\nz0m = median((zr - d) * exp(-k*wind  ustar - psi_m)\n\nBy default, d in this equation is fixed to 0.7*zh, but can be set to any other value.   \n\nValue\n\na NamedTuple with the following components:\n\nd: Zero-plane displacement height (m)\nz0m: Roughness length for momentum (m)\nz0m_se: Only if method = wind_profile: Standard Error of the median for z0m (m)\n\nReferences\n\nChoudhury, B. J., Monteith J_L., 1988: A four-layer model for the heat budget of homogeneous land surfaces. Q. J. R. Meteorol. Soc. 114, 373-398.\nShaw, R. H., Pereira, A., 1982: Aerodynamic roughness of a plant canopy:  a numerical experiment. Agricultural Meteorology, 26, 51-65.\n\nSee also\n\nwind_profile\n\nusing DataFrames\n# estimate d and z0m from canopy height for a dense (LAI=5) and open (LAI=2) canopy\nzh = 25.0\nroughness_parameters(Val(:canopy_height_LAI),zh,5)\nroughness_parameters(Val(:canopy_height_LAI),zh,2)   \n   \n# fix d to 0.7*zh and estimate z0m from the wind profile\ndf = DataFrame(Tair=[25,25,25],pressure=100,wind=[3,4,5],ustar=[0.5,0.6,0.65],H=200)\nroughness_parameters(Val(:wind_profile),df;zh,zr=40,d=0.7*zh)\n\n# assume d = 0.8*zh\nrp = roughness_parameters(Val(:wind_profile),df;zh,zr=40,d=0.8*zh)\nâ‰ˆ(rp.z0m, 0.55, rtol=0.1)\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.roughness_z0h-Tuple{Any, Any}","page":"Index","title":"Bigleaf.roughness_z0h","text":"roughness_z0h(z0m, kB_h)\n\nArguments\n\nz0m : Roughness length for momentum (m). Can be calculated          by roughness_parameters.\nkB_h : kB-1 parameter, Output of aerodynamic_conductance!          \n\nDetails\n\nThe roughness length for water and heat (z0h) is calculated from the  relationship (e.g. Verma 1989):\n\nk_B_h = ln(z_0mz_0h) \n\nit follows:\n\nz_0h = z_0m  e^k_B_h\n\nReferences\n\nVerma, S., 1989: Aerodynamic resistances to transfers of heat, mass and momentum.   In: Estimation of areal evapotranspiration, IAHS Pub, 177, 13-20.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.set_datetime_ydh!","page":"Index","title":"Bigleaf.set_datetime_ydh!","text":"set_datetime_ydh!(df, timezone = tz\"UTC+0\"; \n    year = df.year, doy = df.doy, hour = df.hour)\n\nUpdate column DateTime column datetime according to year, dayOfYear, and fractional hour.\n\nValue\n\ndf with updated or added column :datetime moved to the first position.\n\n\n\n\n\n","category":"function"},{"location":"autodocs/#Bigleaf.setinvalid_afterprecip!-Tuple{Any}","page":"Index","title":"Bigleaf.setinvalid_afterprecip!","text":"setinvalid_afterprecip!(df; min_precip = 0.01, hours_after = 24.0)\n\nSet records after precipitation to false in :valid column.\n\nArguments\n\ndf: DataFrame with columns :datetime and :precip sorted by :datetime  in increasing order.\n\noptional:\n\nmin_precip (in mm per timestep): minimum precip to be considered effective precipitation.\nhours_after: time after the precipitation event to be considered invalid\n\nValue\n\ndf with modified column :valid.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.setinvalid_nongrowingseason!-Tuple{Any, Any}","page":"Index","title":"Bigleaf.setinvalid_nongrowingseason!","text":"setinvalid_nongrowingseason!(df, tGPP; kwargs...)\n\nSet non-growseason to false in :valid column.\n\nArguments\n\ndf: DataFrame with columns :GPP and :datetime\ntGPP: scalar threshold of daily GPP (see get_growingseason)\n\noptional:\n\nupdate_GPPd: set to true additionally update :GPPd_smoothed column to results from get_growingseason\nand others passed to get_growingseason\n\nValue\n\ndf with modified columns :valid and if  :GPPd_smoothed,  where all non-growing season records are set to false.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.setinvalid_qualityflag!-Tuple{Any}","page":"Index","title":"Bigleaf.setinvalid_qualityflag!","text":"setinvalid_qualityflag!(df; \n  vars=[\"LE\",\"H\",\"NEE\",\"Tair\",\"VPD\",\"wind\"],\n  qc_suffix=\"_qc\",\n  good_quality_threshold = 1.0,\n  missing_qc_as_bad = true,\n  setvalmissing = true, \n)\n\nSet records with quality flags indicating problems to false in :valid column. \n\nArguments\n\ndf: DataFrame with column :GPP\n\noptional\n\nvars=[\"LE\",\"H\",\"NEE\",\"Tair\",\"VPD\",\"wind\"]: columns to theck for quality\nqc_suffix=\"_qc\": naming of the corresponding quality-flag column\ngood_quality_threshold = 1.0: threshold in quality flag up to which data is considered good quality\nmissing_qc_as_bad = true: set to false to not mark records with missing  quality flag as invalid\nsetvalmissing = true: set to false to prevent replacing values in value column  corresponding to problematic quality flag to missing.\n\nValue\n\ndf with modified :valid and value columns. \n\nExample\n\nusing DataFrames\ndf = DataFrame(\n  NEE = 1:3, NEE_qc = [1,1,2],\n  GPP = 10:10:30, GPP_qc = [1,missing,1])\nsetinvalid_qualityflag!(df; vars = [\"NEE\", \"GPP\"])\ndf.valid == [true, false, false]\nismissing(df.GPP[2]) && ismissing(df.NEE[3])\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.setinvalid_range!-Union{Tuple{N}, Tuple{Any, Vararg{Pair, N}}} where N","page":"Index","title":"Bigleaf.setinvalid_range!","text":"setinvalid_range!(df, var_ranges...; setvalmissing = true, ...)\n\nSet records with values outside specified ranges to false in :valid column. \n\nIf their is no limit towards small or large values, supply -Inf or Inf as the minimum or maximum respectively. If there were false values in the :value column before, they are kept false. In addition, set values outside ranges to missing.\n\nArguments\n\ndf: DataFrame with column :GPP\nvar_ranges: Pair Varname_symbol => (min,max): closed valid interval for  respective column \n\noptional\n\nsetvalmissing: set to false to prevent replacing values in value column outside ranges to missing.\n\nValue\n\ndf with modified :valid and value columns. \n\nusing DataFrames\ndf = DataFrame(NEE = [missing, 2,3], GPP = 10:10:30)\nsetinvalid_range!(df, :NEE => (-2.0,4.0), :GPP => (8.0,28.0))\ndf.valid == [false, true, false]\nismissing(df.GPP[3])\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.stability_correction-Tuple{Any}","page":"Index","title":"Bigleaf.stability_correction","text":"stability_correction(zeta; \n  stab_formulation=Val(:Dyer_1970))\nstability_correction(z,d, Tair,pressure,ustar,H; constants,\n  stab_formulation=Val(:Dyer_1970))\nstability_correction!(df; zeta, z, d; \n  stab_formulation=Val(:Dyer_1970), constants = bigleaf_constants())\n\nIntegrated Stability Correction Functions for Heat and Momentum\n\nArguments\n\nzeta             : Stability parameter zeta (-)\nTair,pressure,ustar,H : see Monin_Obukhov_length\nz,d            : see stability_parameter\ndf  : DataFrame containting the variables required by Monin_Obukhov_length\nstab_formulation : Formulation for the stability function. Either            Val(:Dyer_1970), or Val(:Businger_1971) or Val(:no_stability_correction)\n\nIn the second and third form computes zeta by stability_parameter and Monin_Obukhov_length and requires respective arguments.\n\nDetails\n\nThese dimensionless values are needed to correct deviations from the exponential wind profile under non-neutral conditions. The functions give the integrated form of the universal functions. They depend on the value of the stability parameter zeta, a function of heigh z, which can be calculated from the function stability_parameter. The integration of the universal functions is:\n\npsi = -x * zeta \n\nfor stable atmospheric conditions (zeta >= 0), and\n\npsi = 2 * log( (1 + y(zeta))  2)\n\nfor unstable atmospheric conditions (zeta < 0).\n\nThe different formulations differ in their value of x and y.\n\nValue\n\na NamedTuple with the following columns:\n\npsi_h: the value of the stability function for heat and water vapor (-)\npsi_m: the value of the stability function for momentum (-)\n\nReferences\n\nDyer, A_J., 1974: A review of flux-profile relationships.  Boundary-Layer Meteorology 7, 363-372.\nDyer, A. J., Hicks, B_B., 1970: Flux-Gradient relationships in the constant flux layer. Quart. J. R. Meteorol. Soc. 96, 715-721.\nBusinger, J_A., Wyngaard, J. C., Izumi, I., Bradley, E. F., 1971: Flux-Profile relationships in the atmospheric surface layer.  J. Atmospheric Sci. 28, 181-189.\nPaulson, C_A., 1970: The mathematical representation of wind speed and temperature profiles in the unstable atmospheric surface layer. Journal of Applied Meteorology 9, 857-861. Foken, T, 2008: Micrometeorology. Springer, Berlin, Germany.\n\nExamples\n\nusing DataFrames\nzeta = -2:0.5:0.5\ndf2 = DataFrame(stability_correction.(zeta; stab_formulation=Val(:Businger_1971)))                         \npropertynames(df2) == [:psi_h, :psi_m]\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.stability_parameter-Tuple{Any, Any, Any}","page":"Index","title":"Bigleaf.stability_parameter","text":"stability_parameter(z,d,MOL)\nstability_parameter(z,d,Tair, pressure, ustar, H; constants)\nstability_parameter!(df::AbstractDataFrame; z,d, MOL=nothing, constants)\n\ncalculates stability parameter \"zeta\", a parameter characterizing stratification in the  lower atmosphere.\n\nArguments\n\nz   : height (m)\nd   : Zero-plane displacement height (m)\nMOL : Monin-Obukhov-length L (m)\ndf  : DataFrame containting the variables required by Monin_Obukhov_length\n\noptional\n\nconstants=bigleaf_constants()\n\nIn the second variant and if MOL=nothing in the DataFrame variants, MOL is computed by  Monin_Obukhov_length.\n\nDetails\n\nThe stability parameter zeta is given by:\n\nzeta = (z - d)  L\n\nwhere L is the Monin-Obukhov length (m), calculated by Monin_Obukhov_length. The displacement height can  be estimated from the function roughness_parameters.\n\nValue\n\nzeta: stability parameter (-). The nonmutainting DataFrame variant returns a vector. The mutating variant modifies or adds column [:zeta].\n\nusing DataFrames\ndf = DataFrame(Tair=25, pressure=100, ustar=0.2:0.1:1.0, H=40:20:200)\nz=40;d=15\nzeta = stability_parameter.(z,d, df.Tair, df.pressure, df.ustar, df.H)\nall(zeta .< 0)\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.surface_conductance-Tuple{Val{:FluxGradient}, Any, Any, Any, Any}","page":"Index","title":"Bigleaf.surface_conductance","text":"  surface_conductance(::Val{:FluxGradient},   Tair,pressure,VPD,LE; constants)\n  surface_conductance(::Val{:PenmanMonteith}, Tair,pressure,VPD,LE,Rn,Ga_h; \n        G = 0.0, S = 0.0, Esat_formula=Val(:Sonntag_1990), constants)\n\n  surface_conductance!(df, method::Val{:FluxGradient}; kwargs...)\n  surface_conductance!(df, method::Val{:PenmanMonteith}; G = 0.0, S = 0.0, kwargs...)\n\nCalculate surface conductance to water vapor from the inverted Penman-Monteith equation  or from a simple flux-gradient approach.\n\nArguments\n\nTair      : Air temperature (deg C)\npressure  : Atmospheric pressure (kPa)\nRn        : Net radiation (W m-2)\ndf        : DataFrame with above variables\nconstants=bigleaf_constants(): Dictionary with physical constants\n\nadditional for PenmanMonteith\n\nLE        : Latent heat flux (W m-2)\nVPD       : Vapor pressure deficit (kPa)\nGa_h      : Aerodynamic conductance towater vapor (m s-1), assumed equal to that of heat\nG=0.0     : Ground heat flux (W m-2), defaults to zero\nS=0.0     : Sum of all storage fluxes (W m-2), defaults to zero\nEsat_formula=Val(:Sonntag_1990): formula used in Esat_from_Tair\n\nDetails\n\nFor Val(:PenmanMonteith), surface conductance (Gs) in m s-1  is calculated from the inverted Penman-Monteith equation:\n\nG_s = ( LE  G_a  gamma )  ( Delta  A + rho  c_p  G_a  VPD -  LE  (Delta + gamma ))\n\nWhere gamma is the psychrometric constant (kPa K-1), Delta is the slope of the  saturation vapor pressure curve (kPa K^-1), and rho is air density (kg m-3). Available energy (A) is defined as A = R_n - G - S. \n\nGround heat flux and total storage flux can be provided as scalars or vectors of the lenght of the DataFrame in the DataFrame variant. While the bigleaf R package by default converts any missings in G and S to 0, in Bigleaf.jl the caller must take care, e.g. by using G = coalesce(myGvector, 0.0).\n\nFor Val(:FluxGradient), Gs (in mol m-2 s-1) is calculated from VPD and ET only:\n\nGs = ETp  VPD\n\nwhere ET is in mol m-2 s-1 and p is pressure.  Note that this formulation assumes fully coupled conditions (i.e. Ga = inf). This formulation is equivalent to the inverted form of Eq.6 in McNaughton & Black 1973:\n\nGs = LE  gamma  (rho  c_p  VPD)\n\nwhich gives Gs in m s-1. Note that Gs > Gc (canopy conductance) under conditions  when a significant fraction of ET comes from interception or soil evaporation. \n\nIf pressure is not available, it can be approximated by elevation using the  function pressure_from_elevation\n\nValue\n\nNamedTuple with entries: \n\nGs_ms: Surface conductance in m s-1\nGs_mol: Surface conductance in mol m-2 s-1\n\nReferences\n\nMonteith, J., 1965: Evaporation and environment. In Fogg, G. E. (Ed.), The state and movement of water in living organisms (pp.205-234). 19th Symp. Soc. Exp. Biol., Cambridge University Press, Cambridge\nMcNaughton, KG., Black, TA., 1973: A study of evapotranspiration from a Douglas Fir forest using the energy balance approach. Water Resources Research 9, 1579-1590.\n\nExamples\n\nTair,pressure,VPD,LE,Rn,Ga_h,G = (14.8, 97.7, 1.08, 183.0, 778.0, 0.116, 15.6)\nGs = surface_conductance(Val(:PenmanMonteith), Tair,pressure,VPD,LE,Rn,Ga_h;G)\nisapprox(Gs.Gs_mol, 0.28, atol=0.1)\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.umolCO2_to_gC-Tuple{Any}","page":"Index","title":"Bigleaf.umolCO2_to_gC","text":"umolCO2_to_gC(CO2_flux; constants=bigleaf_constants())\ngC_to_umolCO2(C_flux; constants=bigleaf_constants())\n\nConvert CO2 quantities from (umol CO2 m-2 s-1) to (g C m-2 d-1) and vice versa.\n\nArguments\n\nCO2_flux  CO2 flux (umol CO2 m-2 s-1)\nC_flux    Carbon (C) flux (gC m-2 d-1)\nconstants: dictionary from bigleaf_constants with entries: Cmol, umol2mol, mol2umol, kg2g, g2kg, says2seconds\n\nExamples\n\numolCO2_to_gC(20)  # gC m-2 d-1\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.virtual_temp-Tuple{Any, Any, Any}","page":"Index","title":"Bigleaf.virtual_temp","text":"virtual_temp(Tair,pressure,VPD; ...)\n\nVirtual temperature, defined as the temperature at which dry air would have the same              density as moist air at its actual temperature.\n\nArguments\n\nTair:      Air temperature (deg C)\npressure:  Atmospheric pressure (kPa)\nVPD:       Vapor pressure deficit (kPa)\nEsat_formula: formula used in Esat_from_Tair\n\noptional \n\nconstants=bigleaf_constants(): Dictionary with entries \n:Kelvin - conversion degree Celsius to Kelvin\n:eps - ratio of the molecular weight of water vapor to dry air (-) \n\nDetails\n\nThe virtual temperature is given by:\n\nTv = Tair / (1 - (1 - eps) e/pressure)\n\nwhere Tair is in Kelvin (converted internally)_ Likewise, VPD is converted   to actual vapor pressure (e in kPa) with VPD_to_e internally.\n\nValue\n\nvirtual temperature (deg C)\n\nReferences\n\nMonteith J.L., Unsworth M.H., 2008: Principles of Environmental Physics.           3rd edition. Academic Press, London.\n\nExamples\n\nTair,pressure,VPD = 25,100,1.5\nvt = virtual_temp(Tair,pressure,VPD)  \nâ‰ˆ(vt, 26.9, atol =0.1)\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.wetbulb_temp-Tuple{Any, Any, Any}","page":"Index","title":"Bigleaf.wetbulb_temp","text":"wetbulb_temp(Tair, pressure, VPD; ...)\n\nCalculate the wet bulb temperature, ie the temperature              that the air would have if it was saturated\n\nArguments\n\nTair:      Air temperature (deg C)\npressure:  Atmospheric pressure (kPa)\nVPD:       Vapor pressure deficit (kPa)\n\noptional\n\naccuracy:  Accuracy of the result (deg C)\nEsat_formula: formula used in Esat_from_Tair\nconstants=bigleaf_constants(): Dictionary with entries     cp, eps,Pa2kPa\n\nDetails\n\nWet-bulb temperature (Tw) is calculated from the following expression:\n\ne = Esat(Tw) - gamma* (Tair - Tw)\n\nThe equation is optimized for Tw. Actual vapor pressure e (kPa) is calculated from VPD using VPD_to_e. The psychrometric constant gamma (kPa K-1) is calculated using psychrometric_constant.\n\nValue\n\nwet-bulb temperature (degC)\n\nReferences\n\nMonteith J.L., Unsworth M.H., 2008: Principles of Environmental Physics.             3rd edition. Academic Press, London.\n\nExamples\n\nwetbulb_temp.([20,25.0], 100, [1,1.6])             \n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.wetbulb_temp_from_e_Tair_gamma-Tuple{Any, Any, Any}","page":"Index","title":"Bigleaf.wetbulb_temp_from_e_Tair_gamma","text":"wetbulb_temp(Tair, pressure, VPD; ...)\n\nCalculate the wet bulb temperature, ie the temperature              that the air would have if it was saturated\n\nArguments\n\nTair:      Air temperature (deg C)\npressure:  Atmospheric pressure (kPa)\nVPD:       Vapor pressure deficit (kPa)\n\noptional\n\naccuracy:  Accuracy of the result (deg C)\nEsat_formula: formula used in Esat_from_Tair\nconstants=bigleaf_constants(): Dictionary with entries     cp, eps,Pa2kPa\n\nDetails\n\nWet-bulb temperature (Tw) is calculated from the following expression:\n\ne = Esat(Tw) - gamma* (Tair - Tw)\n\nThe equation is optimized for Tw. Actual vapor pressure e (kPa) is calculated from VPD using VPD_to_e. The psychrometric constant gamma (kPa K-1) is calculated using psychrometric_constant.\n\nValue\n\nwet-bulb temperature (degC)\n\nReferences\n\nMonteith J.L., Unsworth M.H., 2008: Principles of Environmental Physics.             3rd edition. Academic Press, London.\n\nExamples\n\nwetbulb_temp.([20,25.0], 100, [1,1.6])             \n\n\n\n\n\n","category":"method"},{"location":"autodocs/#Bigleaf.wind_profile-Tuple{Number, Union{Missing, Number}, Any, Any, Any}","page":"Index","title":"Bigleaf.wind_profile","text":"wind_profile(z::Number, ustar, d, z0m, psi_m = zero(z); constants)\nwind_profile(z, df::AbstractDataFrame, d, z0m, psi_m::AbstractVector; constants)\nwind_profile(z, df::DFTable, d, z0m; psi_m = nothing,\n  stab_formulation = Val(:Dyer_1970), constants)\n\nWind speed at a given height above the canopy estimated from single-level measurements of wind speed.\n\nArguments\n\nz         : Height above ground for which wind speed is calculated.\nustar     : Friction velocity (m s-1)\nd         : Zero-plane displacement height (-)\nz0m       : Roughness length (m)\nconstants=bigleaf_constants()\n\nFor DataFrame variant with supplying stability_parameter\n\ndf:         : DataFrame with columns \nustar     : Friction velocity (m s-1)\npsi_m     : value of the stability function for heat, see stability_correction Pass psi_m = 0.0 to neglect stability correction.\n\nFor DataFrame varinat where psi_m is to be estimated\n\nadditional columns in df:\nTair, pressure, H : see stability_correction\n\nDetails\n\nThe underlying assumption is the existence of a logarithmic wind profile above the height d + z0m (the height at which wind speed mathematically reaches zero according to the Monin-Obhukov similarity theory). In this case, the wind speed at a given height z is given by:\n\nu(z) = (ustark) * (ln((z - d)  z0m) - psi_m\n\nThe roughness parameters zero-plane displacement height (d) and roughness length (z0m) can be approximated from roughness_parameters.  psi_m is the stability correction. Set it to zero (not recommended) to neglect statbility correction. By default it is estimated from wind profile using stability_correction\n\nNote\n\nNote that this equation is only valid for z >= d + z0m, and it is not  meaningful to calculate values closely above d + z0m. All values in heights smaller than d + z0m will return 0. \n\nValue\n\nwind speed at given height z. \n\nReferences\n\nMonteith, JL., Unsworth, MH., 2008: Principles of Environmental Physics. 3rd edition. Academic Press, London. \nNewman, JF., Klein, PM., 2014: The impacts of atmospheric stability on the accuracy of wind speed extrapolation methods. Resources 3, 81-105.\n\nSee also\n\nroughness_parameters\n\nusing DataFrames\nheights = 18:2:40  # heights above ground for which to calculate wind speed\ndf = DataFrame(Tair=25,pressure=100,wind=[3,4,5],ustar=[0.5,0.6,0.65],H=[200,230,250]) \nzr=40;zh=25;d=16\n# z0m and MOL are independent of height, compute before\nMOL = Monin_Obukhov_length.(df.Tair, df.pressure, df.ustar, df.H)\nz0m = roughness_parameters(\n  Val(:wind_profile), df.ustar, df.wind, df.Tair, df.pressure, df.H; zh, zr).z0m \nws = map(heights) do z\n  wind_profile(z,df,d,z0m; MOL)\nend\nusing Plots # plot wind profiles for the three rows in df\nplot(first.(ws), heights, ylab = \"height (m)\", xlab = \"wind speed (m/s)\", legend=:topleft)\nplot!(getindex.(ws, 2), heights)\nplot!(getindex.(ws, 3), heights)\nnothing\n# output\n\n\n\n\n\n","category":"method"},{"location":"aerodynamic_conductance/#Aerodynamic-Conductance","page":"-","title":"Aerodynamic Conductance","text":"","category":"section"},{"location":"aerodynamic_conductance/","page":"-","title":"-","text":"Pages = [\"aerodynamic_conductance.md\",]","category":"page"},{"location":"aerodynamic_conductance/","page":"-","title":"-","text":"aerodynamic_conductance!\ncompute_Ram\nroughness_z0h\nadd_Ga!","category":"page"},{"location":"aerodynamic_conductance/#Bigleaf.aerodynamic_conductance!","page":"-","title":"Bigleaf.aerodynamic_conductance!","text":"aerodynamic_conductance!(df; \n  Gb_model = Val(:Thom_1972), Ram_model = Val(:wind_zr),\n  zr=nothing,zh=nothing, d = isnothing(zh) ? nothing : 0.7*zh,\n  ...\n  )\n\nBulk aerodynamic conductance, including options for the boundary layer conductance formulation and stability correction functions.\n\nArguments\n\ndf: DataFrame with columns\nustar     : Friction velocity (m s-1)\nwind      : Wind speed at sensor height (m s-1)\nGb_model  : model for computing boundary layer conductance (see compute_Gb!)\nRam_model : model for computing aerodynamic resistance (see compute_Ram)\nzh        : canopy height (m)\nzr        : Instrument (reference) height (m)\n\nFurther required columns of df and keyword argument depend on Gb_model   (see compute_Gb!) and Ram_model (see compute_Ram).\n\nIf only columns ustar and wind are available, use default models  (Val(:Thom_1972) and Val(:wind_zr)).\n\nDetails\n\nAerodynamic conductance for heat (Ga_h) is calculated as:\n\nGa_h = 1  (Ra_m + Rb_h)\n\nwhere Ra_m is the aerodynamic resistance for momentum and Rb_h = 1Gb_h the  (quasi-laminar) canopy boundary layer resistance ('excess resistance') for heat.\n\nRa_m is computed and described with compute_Ram using model Ram_model.\n\nRb_h is computed and described with 1/compute_Gb! using a given Gb_model.\n\nValue\n\ncombined results of compute_Gb! and \n\nRa_m: Aerodynamic resistance for momentum transfer (s m-1)\nGa_m: Aerodynamic conductance for momentum transfer (m s-1)\nGa_h: Aerodynamic conductance for heat transfer (m s-1)\nRa_h: Aerodynamic resistance for heat transfer (s m-1)\nGa_CO2: Aerodynamic conductance for CO2 transfer (m s-1)\n\nNote\n\nThe roughness length for water and heat (z0h) can be computed by roughness_z0h.\n\nTODO check Input variables such as LAI, Dl, or zh can be either constants, or vary with time, i.e. are vectors of the same length as df.\n\nNote that boundary layer conductance to water vapor transfer (Gb_w) is often  assumed to equal Gb_h. This assumption is also made in Bigleaf.jl, for  example in the function surface_conductance.\n\nIf the roughness length for momentum (z0m) is not provided as input, it is estimated  using roughness_parameters, which estimates a single z0m  value for the entire time period. If a varying z0m value  (e.g. across seasons or years) is required, z0m should be provided as input argument.\n\nExamples\n\nusing DataFrames\ndf = DataFrame(Tair=25,pressure=100,wind=[3,4,5],\n  ustar=[0.5,0.6,0.65],H=[200,230,250])   \n# simple calculation of Ga  \naerodynamic_conductance!(df;Gb_model=Val(:Thom_1972)) \n# calculation of Ram using a model derived from the logarithmic wind profile\naerodynamic_conductance!(df;Gb_model=Val(:Thom_1972),Ram_model = Val(:wind_profile), \n  zr=40,zh=25,d=17.5,z0m=2) \n# simple calculation of Ga, but a physically based canopy boundary layer model\naerodynamic_conductance!(df,Gb_model=Val(:Su_2001),\n  zr=40,zh=25,d=17.5,Dl=0.05,N=2,fc=0.8)\nall(isfinite.(df.psi_h))\n\n\n\n\n\n","category":"function"},{"location":"aerodynamic_conductance/#Bigleaf.compute_Ram","page":"-","title":"Bigleaf.compute_Ram","text":"compute_Ram(::Val{:wind_profile}, ustar; \n  zr, d, z0m, psi_h, constants=bigleaf_constants())\ncompute_Ram!(df, method::Val{:wind_profile};  \n  zr, d, z0m, psi_h = df.psi_h, kwargs...)\n\ncompute_Ram(::Val{:wind_zr}, ustar, wind)\ncompute_Ram!(df, method::Val{:wind_zr}; kwargs...)\n\nEstimate bulk aerodynamic conductance.\n\nArguments\n\nustar          : Friction velocity (m s-1)\ndf             : DataFrame with above columns\nzr             : Instrument (reference) height (m)\nd              : Zero-plane displacement height (-), can be estimated using                      roughness_parameters\nz0m            : Roughness length for momentum (m). Can be estimated using                     from roughness_parameters  \npsi_h          : the value of the stability function for heat and water vapor (-)                    see stability_correction\n\nDetails\n\nThe aerodynamic resistance for momentum R_a_m is given by (Ram_method = Val(:wind_zr)):\n\nR_a_m = uu^*^2\n\nWhere u is the horizontal wind velocity.  Note that this formulation accounts for changes in atmospheric stability, and does not  require an additional stability correction function. \n\nAn alternative method to calculate Ra_m is provided (Ram_method = Val(:wind_profile)):\n\nR_a_m = (ln((z_r - d)z_0m) - psi_h)  (k  u^*)\n\nIf the roughness parameters z0m and d are unknown, they can be estimated using roughness_parameters. The argument stab_formulation determines the stability  correction function used to account for the effect of atmospheric stability on Ra_m  (Ra_m is lower for unstable and higher for stable stratification). Stratification is based  on a stability parameter zeta zeta=(z-dL), where z is the height,  d the zero-plane displacement height, and L the Monin-Obukhov length, calculated with  Monin_Obukhov_length The stability correction function is chosen by the argument stab_formulation.  Options are Val(:Dyer_1970) and Val(:Businger_1971) and Val(:no_stability_correction).\n\nNote\n\nFor adding aerodynamic conductance for other species see add_Ga!.\n\nValue\n\nAerodynamic resistance for momentum transfer (s m-1) (Ra_m)\n\nReferences\n\nVerma, S., 1989: Aerodynamic resistances to transfers of heat, mass and momentum. In: Estimation of areal evapotranspiration, IAHS Pub, 177, 13-20.\nVerhoef, A., De Bruin, H., Van Den Hurk, B., 1997: Some practical notes on the parameter kB-1 for sparse vegetation. Journal of Applied Meteorology, 36, 560-572.\nHicks, BB., Baldocchi, DD., Meyers, TP., Hosker, JR., Matt, D_R., 1987: A preliminary multiple resistance routine for deriving dry deposition velocities from measured quantities. Water, Air, and Soil Pollution 36, 311-330.\nMonteith, JL., Unsworth, MH., 2008: Principles of environmental physics. Third Edition. Elsevier Academic Press, Burlington, USA. \n\nSee also\n\naerodynamic_conductance!, add_Ga!\n\n\n\n\n\n","category":"function"},{"location":"aerodynamic_conductance/#Bigleaf.roughness_z0h","page":"-","title":"Bigleaf.roughness_z0h","text":"roughness_z0h(z0m, kB_h)\n\nArguments\n\nz0m : Roughness length for momentum (m). Can be calculated          by roughness_parameters.\nkB_h : kB-1 parameter, Output of aerodynamic_conductance!          \n\nDetails\n\nThe roughness length for water and heat (z0h) is calculated from the  relationship (e.g. Verma 1989):\n\nk_B_h = ln(z_0mz_0h) \n\nit follows:\n\nz_0h = z_0m  e^k_B_h\n\nReferences\n\nVerma, S., 1989: Aerodynamic resistances to transfers of heat, mass and momentum.   In: Estimation of areal evapotranspiration, IAHS Pub, 177, 13-20.\n\n\n\n\n\n","category":"function"},{"location":"aerodynamic_conductance/#Bigleaf.add_Ga!","page":"-","title":"Bigleaf.add_Ga!","text":"add_Ga(Gb_h, Ga_m, Sc::Vararg{Pair,N}; constants)\nadd_Ga!(df::AbstractDataFrame, Sc; Gb_h = df.Gb_h, Ga_m = df.Ga.m, kwargs...)\n\ncompute additional aerodynamic conductance quantities for given Schmidt-numbers\n\nArguments\n\nGb_h     : Boundary layer conductance for heat transfer (m s-1)\nGa_m     : Aerodynamic conductance for momentum (m s-1)\nSc       : several Pair{Symbol,Number} Output name and Schmidt number of               additional conductances to be calculated\ndf       : DataFrame to add output columns               \n\noptional\n\nconstants=bigleaf_constants(): Dictionary with entries \nPr - Prandtl number \n\nDetails\n\nAerodynamic conductance is calculated as\n\nG_a_x = 1(1G_a_m + 1G_b_x)\n\nwhere Gb_x is the Boundary layer conductance for other quantities x is calculated  based on boundary layer for heat transfer, Schmidt-Number, and  Prantl number, as documented in add_Gb!.\n\nValue\n\na NameTuple or df with keys Ga_x where x are the keys in Sc and  corresponding aerodynamic conductances (m s-1).\n\nExamples\n\nusing DataFrames\ndf = DataFrame(Gb_h=[0.02, missing, 0.055], Ga_m = 1 ./ [0.03, 0.03, 0.03])\nadd_Ga!(df, :O2 => 0.84, :CH4 => 0.99)\npropertynames(df)[3:4] == [:Ga_O2, :Ga_CH4]\n\n\n\n\n\n","category":"function"},{"location":"boundary_layer_conductance/#Boundary-Layer-Conductance","page":"-","title":"Boundary Layer Conductance","text":"","category":"section"},{"location":"boundary_layer_conductance/","page":"-","title":"-","text":"Pages = [\"boundary_layer_conductance.md\",]","category":"page"},{"location":"boundary_layer_conductance/","page":"-","title":"-","text":"compute_Gb!\nadd_Gb!\nGb_Thom\nGb_Choudhury\nGb_Su","category":"page"},{"location":"boundary_layer_conductance/#Bigleaf.compute_Gb!","page":"-","title":"Bigleaf.compute_Gb!","text":"compute_Gb!(df::AbstractDataFrame, approach; kwargs...)\n\nEstimate boundary layer conductance.\n\nArguments\n\ndf       : DataFrame with required variables (depend on approach)\napproach : one of\nVal(:Thom_1972): see Gb_Thom\nVal(:Choudhury_1988): see Gb_Choudhury\nVal(:Su_2001): see Gb_Su\nVal(:constant_kB1): see Gb_constant_kB1\n\nThe different approaches require different variables to be present in df and different keyword arguments.\n\nValue\n\nupdated DataFrame df with the following columns:\n\nGb_h: Boundary layer conductance for heat transfer (m s-1)\n\nTo subsequently derived quantities see\n\ncompute_Gb_quantities for Resistance, kB-1 constant, and CO2 conductance\nadd_Gb! for conductances of other species given their Schmidt numbers.\n\nSee also\n\nGb_Thom, Gb_Choudhury, Gb_Su, Gb_constant_kB1,  aerodynamic_conductance!\n\nusing DataFrames\ndf = DataFrame(wind=[3,4,5], ustar=[0.5,0.6,0.65]) \ncompute_Gb!(df, Val(:Thom_1972))\nâ‰ˆ(df.Gb_h[1], 0.102, rtol=1e-2)\n\n\n\n\n\n","category":"function"},{"location":"boundary_layer_conductance/#Bigleaf.add_Gb!","page":"-","title":"Bigleaf.add_Gb!","text":"add_Gb(Gb_h::Union{Missing,Number}, Sc::Vararg{Pair,N}; constants)\nadd_Gb!(df::AbstractDataFrame, Sc::Vararg{Pair,N}; Gb_h = df.Gb_h, kwargs...)\n\ncompute boundary layer conductance for additional quantities for given Schmidt-numbers\n\nArguments\n\nGb_h     : Boundary layer conductance for heat transfer (m s-1)\nSc       : several Pair{Symbol,Number} Output name and Schmidt number of               additional conductances to be calculated\ndf       : DataFrame to add output columns               \n\noptional\n\nconstants=bigleaf_constants(): Dictionary with entries \nPr - Prandtl number \n\nDetails\n\nBoundary layer conductance for other quantities x is calculated  based on boundary layer for heat transfer as (Hicks et al. 1987):\n\nGb_x = Gb_h  (Sc_x  Pr)^067\n\nwhere Sc_x is the Schmidt number of quantity x, and Pr is the Prandtl number (0.71).\n\nValue\n\na NameTuple or df with keys Gb_x where x are the keys in Sc and  corresponding boundary layer conductances (m s-1).\n\nExamples\n\nusing DataFrames\ndf = DataFrame(Gb_h=[0.02, missing, 0.055])\nadd_Gb!(df, :O2 => 0.84, :CH4 => 0.99)\npropertynames(df)[2:3] == [:Gb_O2, :Gb_CH4]\n\n\n\n\n\n","category":"function"},{"location":"boundary_layer_conductance/#Bigleaf.Gb_Thom","page":"-","title":"Bigleaf.Gb_Thom","text":"Gb_Thom(ustar; constants)\ncompute_Gb!(df, Val{:Thom_1972})\n\nBoundary Layer Conductance according to Thom 1972, an empirical formulation for the  for heat transfer based on a simple ustar (friction velocity) dependency.\n\nArguments\n\nustar     : Friction velocity (m s-1)\ndf        : DataFrame with above variables\nconstants=bigleaf_constants()\n\nDetails\n\nThe empirical equation for Rb suggested by Thom 1972 is:\n\nRb = 62 u^*^-067\n\nGb (=1/Rb) for water vapor and heat are assumed to be equal in this package.\n\nValue\n\nsee compute_Gb!\n\nReferences\n\nThom, A., 1972: Momentum, mass and heat exchange of vegetation. Quarterly Journal of the Royal Meteorological Society 98, 124-134.\nHicks, BB., Baldocchi, DD., Meyers, TP., Hosker, JR., Matt, D_R., 1987: A preliminary multiple resistance routine for deriving dry deposition velocities from measured quantities. Water, Air, and Soil Pollution 36, 311-330.\n\nusing DataFrames\ndf = DataFrame(ustar = SA[0.1,missing,0.3])\ncompute_Gb!(df, Val(:Thom_1972))\npropertynames(df) == [:ustar, :Gb_h]\n\n\n\n\n\n","category":"function"},{"location":"boundary_layer_conductance/#Bigleaf.Gb_Choudhury","page":"-","title":"Bigleaf.Gb_Choudhury","text":"Gb_Choudhury(; leafwidth, LAI, wind_zh, constants)\nGb_Choudhury!(df; leafwidth, LAI, wind_zh, constants)\n\nEstimate the canopy boundary layer conductance  for heat transfer according to Choudhury & Monteith 1988.\n\nArguments\n\ndf               : DataFrame where Gb_h is to be added/updated\nleafwidth        : Leaf width (m)\nLAI              : One-sided leaf area index\nwind_zh          : Wind speed at canopy heihgt (m s-1), see wind_profile \nconstants=bigleaf_constants()\n\nValue\n\nsee compute_Gb!\n\nDetails\n\nBoundary layer conductance according to Choudhury & Monteith 1988 is given by:\n\nGb_h = LAI left( 2aalpha sqrtu(z_h)w (1-e^-alpha2)right)\n\nwhere alpha is modeled as an empirical relation to LAI (McNaughton & van den Hurk 1995):\n\nalpha = 439 - 397 e^-0258  LAI\n\nw is leafwidth and u(zh) is the wind speed at the canopy surface.\n\nIt can be approximated from measured wind speed at sensor height zr and a wind extinction  coefficient alpha: u(z_h) = u(z_r)  e^alpha(z_rz_h -1). However, here (if not explicitly given) it is estimated by wind_profile\n\nReferences\n\nChoudhury, B. J., Monteith J_L., 1988: A four-layer model for the heat budget of homogeneous land surfaces. Q. J. R. Meteorol. Soc. 114, 373-398.\nMcNaughton, K. G., Van den Hurk, BJJ_M., 1995: A 'Lagrangian' revision of the resistors in the two-layer model for calculating the energy budget of a plant canopy. Boundary-Layer Meteorology 74, 261-288.\nHicks, BB., Baldocchi, DD., Meyers, TP., Hosker, JR., Matt, D_R., 1987: A preliminary multiple resistance routine for deriving dry deposition velocities from measured quantities. Water, Air, and Soil Pollution 36, 311-330.\n\n\n\n\n\n","category":"function"},{"location":"boundary_layer_conductance/#Bigleaf.Gb_Su","page":"-","title":"Bigleaf.Gb_Su","text":"Gb_Su(Tair,pressure,ustar; wind_zh, Dl, fc, N=2, Cd=0.2, hs=0.01, constants)\nGb_Su!(df; wind_zh, Dl, fc=nothing, N=2, Cd=0.2, hs=0.01, LAI, constants)\n\nEstimate Boundary Layer Conductance to heat transfer using the physically based  formulation according to Su et al. 2001. \n\nArguments\n\nTair      : Air temperature (degC)\npressure  : Atmospheric pressure (kPa)\nustar     : Friction velocity (m s-1)\ndf        : DataFrame or matrix containing the above variables\nDl        : Leaf characteristic dimension (m)\nfc        : Fractional vegetation cover 0-1\nLAI       : One-sided leaf area index (-) - alternative to fc.\nN         : Number of leaf sides participating in heat exchange (defaults to 2)\nCd        : Foliage drag coefficient (-)\nhs        : Roughness height of the soil (m)\nconstants=bigleaf_constants()\n\nValue\n\nsee compute_Gb!\n\nDetails\n\nThe formulation is based on the kB-1 model developed by Massman 1999.  Su et al. 2001 derived the following approximation:\n\nk_B1 = (k C_d f_c^2)  (4C_t u^*u(z_h)) + k_Bs-1(1 - f_c)^2\n\nIf f_c (fractional vegetation cover) is missing, it is estimated from LAI: f_c = 1 - e^-LAI2\n\nThe wind speed at the top of the canopy is calculated using function wind_profile.\n\nCt is the heat transfer coefficient of the leaf (Massman 1999):\n\nC_t = P_r^-23 R_eh^-12  N\n\nwhere P_r is the Prandtl number (set to 0.71),  and R_eh is the Reynolds number for leaves:\n\nR_eh = D_l  wind(z_h)  v\n\nk{Bs-1}, the k{B-1} value for bare soil surface, is calculated according  to Su et al. 2001:\n\nk_Bs-1 = 246(Re)^025 - ln(74)\n\nReferences\n\nSu, Z., Schmugge, T., Kustas, W. & Massman, W., 2001: An evaluation of two models for estimation of the roughness height for heat transfer between the land surface and the atmosphere. Journal of Applied Meteorology 40, 1933-1951.\nMassman, W., 1999: A model study of kB H- 1 for vegetated surfaces using localized near-field' Lagrangian theory. Journal of Hydrology 223, 27-43.\nHicks, BB., Baldocchi, DD., Meyers, TP., Hosker, JR., Matt, D_R., 1987:  A preliminary multiple resistance routine for deriving dry deposition velocities from measured quantities. Water, Air, and Soil Pollution 36, 311-330.\n\nusing DataFrames\ndf = DataFrame(Tair=25,pressure=100,wind=[3,4,5],ustar=[0.5,0.6,0.65],H=[200,230,250]) \nzh = 25; zr = 40\nz0m = roughness_parameters(\n  Val(:wind_profile), df.ustar, df.wind, df.Tair, df.pressure, df.H; zh, zr).z0m \nwind_zh = wind_profile(zh, df, 0.7*zh, z0m)\ncompute_Gb!(df,Val(:Su_2001); wind_zh, Dl=0.01, LAI=5)\n# the same meteorological conditions, but larger leaves\ncompute_Gb!(df,Val(:Su_2001); wind_zh, Dl=0.1,LAI=5)\n# same conditions, large leaves, and sparse canopy cover (LAI = 1.5)\ncompute_Gb!(df,Val(:Su_2001); wind_zh, Dl=0.1,LAI=1.5)\nâ‰ˆ(df.Gb_h[1], 0.0638, rtol=1e-3)\n\n\n\n\n\n","category":"function"},{"location":"unit_conversions/#Unit-conversions","page":"-","title":"Unit conversions","text":"","category":"section"},{"location":"unit_conversions/","page":"-","title":"-","text":"Pages = [\"unit_conversions.md\",]","category":"page"},{"location":"unit_conversions/","page":"-","title":"-","text":"LE_to_ET\nms_to_mol\nVPD_to_e\nRg_to_PPFD\nkg_to_mol\numolCO2_to_gC","category":"page"},{"location":"unit_conversions/#Bigleaf.LE_to_ET","page":"-","title":"Bigleaf.LE_to_ET","text":"LE_to_ET(LE,Tair)\nET_to_LE(ET,Tair)\n\nConvert evaporative water flux from mass (ET=evapotranspiration)              to energy (LE=latent heat flux) units, or vice versa.\n\nArguments\n\nLE   Latent heat flux (W m-2)\nET   Evapotranspiration (kg m-2 s-1)\nTair Air temperature (deg C)\n\nDetails\n\nThe conversions are given by:\n\nET = LElambda\nLE = lambda ET\n\nwhere lambda is the latent heat of vaporization (J kg-1) as calculated by latent_heat_vaporization.\n\nExamples\n\n# LE of 200 Wm-2 and air temperature of 25degC\nET = LE_to_ET(200,25)\nâ‰ˆ(ET, 8.19e-5, atol =1e-7)\n\n\n\n\n\n","category":"function"},{"location":"unit_conversions/#Bigleaf.ms_to_mol","page":"-","title":"Bigleaf.ms_to_mol","text":"ms_to_mol(G_ms,Tair,pressure; constants=bigleaf_constants())\nmol_to_ms(G_mol,Tair,pressure; constants=bigleaf_constants())\n\nConverts conductances from mass (m s-1) to molar units (mol m-2 s-1), or vice versa\n\nDetails\n\nThe conversions are given by\n\nG_mol = G_ms   pressure  (Rgas  Tair)\nG_ms = G_mol   (Rgas  Tair)  pressure\n\nwhere Tair is in Kelvin and pressure in Pa (converted from kPa internally).\n\nReferences\n\nJones, HG 1992_ Plants and microclimate: a quantitative approach to    environmental plant physiology_   2nd Edition, Cambridge University Press, Cambridge 428 \n\nExamples\n\nG_ms,Tair,pressure = 0.005,25,100\nrmol = ms_to_mol(G_ms,Tair,pressure)\nâ‰ˆ(rmol, 0.2017, atol =1e-4)\n\n\n\n\n\n","category":"function"},{"location":"unit_conversions/#Bigleaf.VPD_to_e","page":"-","title":"Bigleaf.VPD_to_e","text":"VPD_to_rH(VPD,Tair; ...)\nH_to_VPD(rH,Tair; ...)\ne_to_rH(e,Tair; ...)\nVPD_to_e(VPD,Tair; ...)\ne_to_VPD(e,Tair; ...)\ne_to_q(e,pressure; ...)\nq_to_e(q,pressure; ...)\nq_to_VPD(q,Tair,pressure; ...)\nVPD_to_q(VPD,Tair,pressure; ...)\n\nConversion between vapor pressure (e), vapor pressure deficit (VPD),              specific humidity (q), and relative humidity (rH).\n\nArguments\n\nTair:      Air temperature (deg C)\npressure:  Atmospheric pressure (kPa)\ne:         Vapor pressure (kPa)\nq:        Specific humidity (kg kg-1)\nVPD:       Vapor pressure deficit (kPa)\nrH:        Relative humidity (-)\n\nAll functions accept the optional arguemtns:\n\nEsat_formula: formula used in Esat_from_Tair\nconstants: dictionary from bigleaf_constants with entries eps and Pa2kPa\n\nRreferences\n\nFoken, T, 2008: Micrometeorology_ Springer, Berlin, Germany.\n\n\n\n\n\n","category":"function"},{"location":"unit_conversions/#Bigleaf.Rg_to_PPFD","page":"-","title":"Bigleaf.Rg_to_PPFD","text":"Rg_to_PPFD(Rg,J_to_mol=4.6,frac_PAR=0.5)\nPPFD_to_Rg(PPFD,J_to_mol=4.6,frac_PAR=0.5)\n\nConversions between Global Radiation (W m-2) and Photosynthetic Photon Flux  Density (umol m-2 s-1)\n\nArguments\n\nRg:       Global radiation = incoming short-wave radiation at the surface (W m-2)\nPPFD:     Photosynthetic photon flux density (umol m-2 s-1)\nJtomol: Conversion factor from J m-2 s-1 (= W m-2) to umol (quanta) m-2 s-1\nfrac_PAR: Fraction of incoming solar irradiance that is photosynthetical-           active radiation (PAR); defaults to 0.5\n\nDetails\n\nThe conversion is given by:\n\nPPFD = Rg * frac_PAR * J_to_mol\n\nby default, the combined conversion factor (frac_PAR * J_to_mol) is 2.3\n\nExamples\n\n# convert a measured incoming short-wave radiation of 500 Wm-2 to\n# PPFD in umol m-2 s-1 and backwards\nRg_to_PPFD(500)\nPPFD_to_Rg(1150)\n\n\n\n\n\n","category":"function"},{"location":"unit_conversions/#Bigleaf.kg_to_mol","page":"-","title":"Bigleaf.kg_to_mol","text":"kg_to_mol(mass, molarMass=bigleaf_constants()[:H2Omol])\n\nConversion between Mass (kg) and Molar Units (mol).\n\n\n\n\n\n","category":"function"},{"location":"unit_conversions/#Bigleaf.umolCO2_to_gC","page":"-","title":"Bigleaf.umolCO2_to_gC","text":"umolCO2_to_gC(CO2_flux; constants=bigleaf_constants())\ngC_to_umolCO2(C_flux; constants=bigleaf_constants())\n\nConvert CO2 quantities from (umol CO2 m-2 s-1) to (g C m-2 d-1) and vice versa.\n\nArguments\n\nCO2_flux  CO2 flux (umol CO2 m-2 s-1)\nC_flux    Carbon (C) flux (gC m-2 d-1)\nconstants: dictionary from bigleaf_constants with entries: Cmol, umol2mol, mol2umol, kg2g, g2kg, says2seconds\n\nExamples\n\numolCO2_to_gC(20)  # gC m-2 d-1\n\n\n\n\n\n","category":"function"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"This vignette is a short introduction to the functionalities of the Bigleaf.jl package.  It is directed to first-time package users who are familiar with the basic concepts of Julia.  After presenting the use of several key functions of the package,  some useful hints and guidelines are given at the end of the vignette.","category":"page"},{"location":"walkthrough/#Package-scope-and-important-conceptual-considerations","page":"Walkthrough","title":"Package scope and important conceptual considerations","text":"","category":"section"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"Bigleaf.jl calculates physical and physiological ecosystem properties from eddy covariance data. Examples for such properties are aerodynamic and surface conductance, surface conditions(e.g. temperature, VPD), wind profile, roughness parameters, vegetation-atmosphere decoupling, potential evapotranspiration, (intrinsic) water-use efficiency, stomatal sensitivity to VPD, or intercellular CO2 concentration.  All calculations in the Bigleaf.jl package assume that the ecosystem behaves like a  \"big-leaf\", i.e. a single, homogenous plane which acts as the only source and sink of the measured fluxes. This assumption comes with the advantages that calculations are simplified considerably and that (in most cases) little ancillary information on the EC sites is required. It is important to keep in mind that these simplifications go hand in hand with critical limitations. All derived variables are bulk ecosystem characteristics and have to be interpreted as such. It is for example not possible to infer within-canopy variations of a certain property.","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"Please also keep in mind that the Bigleaf.jl package does NOT provide formulations for bottom-up modelling. The principle applied here is to use an inversion approach in which ecosystem properties are inferred top-down from the measured fluxes. Such an inversion can, in principle, be also be conducted with more complex models (e.g. sun/shade or canopy/soil models), but keep in mind that these approaches also require that the additional, site-specific parameters are adequately well known. ","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"The use of more detailed models is not within the scope of the Bigleaf.jl package, but it is preferable to use such approaches when important assumptions of the \"big-leaf\" approach are not met. This is the case in particular when the ecosystem is sparsely covered with vegetation (low LAI, e.g. sparse crops, some savanna systems). ","category":"page"},{"location":"walkthrough/#Preparing-the-data","page":"Walkthrough","title":"Preparing the data","text":"","category":"section"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"In this tutorial, we will work with a dataset from the eddy covariance site Tharandt (DE-Tha), a spruce forest in Eastern Germany. The DataFrame DE_Tha_Jun_2014 is downloaded from the bigleaf  R package repository and contains half-hourly data of meteorological and flux measurements made in June 2014. For loading the RData into Julia, see the  source of this file. We give the data.frame a shorter name here and create a timestamp.","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"using Bigleaf\nusing DataFrames","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"using Latexify\nusing DataDeps, Suppressor\nusing RData\nimport CodecBzip2, CodecXz\n#@suppress_err # error in github-actions: GitHubActionsLogger has no field stream\nregister(DataDep(\n    \"DE_Tha_Jun_2014.rda\",\n    \"downloading exampple dataset DE_Tha_Jun_2014 from bitbucket.org/juergenknauer/bigleaf\",\n    \"https://bitbucket.org/juergenknauer/bigleaf/raw/0ebe11626b4409305951e8add9f6436703c82584/data/DE_Tha_Jun_2014.rda\",\n    \"395f02e1a1a2d175ac7499c200d9d48b1cb58ff4755dfd2d7fe96fd18258d73c\"\n))\n#println(datadep\"DE_Tha_Jun_2014.rda\")\nENV[\"DATADEPS_ALWAYS_ACCEPT\"]=\"true\" # avoid question to download\nDE_Tha_Jun_2014 = first(values(load(joinpath(datadep\"DE_Tha_Jun_2014.rda/DE_Tha_Jun_2014.rda\"))))\nnothing","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"tha = DE_Tha_Jun_2014\nset_datetime_ydh!(tha)\n# mdtable(select(describe(tha), :variable, :eltype, :min, :max), latex=false) # hide\nnothing # hide","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"And the first six rows of tha:","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"mdtable(tha[1:6,:],latex=false) # hide","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"More information on the data (e.g. meaning of column names and units) can be found at the  bigleaf R package.  For more information on the site see e.g. GrÃ¼nwald & Bernhofer 2007. In addition, we will need some ancillary data for this site throughout this tutorial. To ensure consistency, we define them here at the beginning:","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"thal = (\n     LAI = 7.6,   # leaf area index\n     zh  = 26.5,  # average vegetation height (m)\n     zr  = 42,    # sensor height (m)\n     Dl  = 0.01,  # leaf characteristic dimension (m)\n)\nnothing # hide","category":"page"},{"location":"walkthrough/#General-guidelines-on-package-usage","page":"Walkthrough","title":"General guidelines on package usage","text":"","category":"section"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"There are a few general guidelines that are important to consider when using the Bigleaf.jl package. ","category":"page"},{"location":"walkthrough/#Units","page":"Walkthrough","title":"Units","text":"","category":"section"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"It is imperative that variables are provided in the right units, as the plausibility of  the input units is not checked in most cases. The required units of the input arguments  can be found in the respective help file of the function. The good news is that units  do not change across functions. For example, pressure is always required in kPa,  and temperature always in Â°C.","category":"page"},{"location":"walkthrough/#Function-arguments","page":"Walkthrough","title":"Function arguments","text":"","category":"section"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"Bigleaf.jl usually provides functions in two flavours.","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"providing all arguments seperately as scalars and output being a single scalar or a NamedTuple\nproviding a DataFrame as first argument with columns corresponding to the inputs and  ouput being the in-place modified DataFrame. Most keyword arguments accept both, vectors or scalars. The column names in the DataFrame should correspond to the argument names of the corresponding method with individual inputs.","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"We can demonstrate the usage with a simple example:","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"# explicit inputs\nTair, pressure, Rn, =  14.81, 97.71, 778.17 \npotential_ET(Val(:PriestleyTaylor), Tair, pressure, Rn)\n\n# DataFrame\npotential_ET!(copy(tha), Val(:PriestleyTaylor))\n\n# DataFrame with a few columns overwritten by user values\npotential_ET!(transform(tha, :Tair => x -> 25.0; renamecols=false), Val(:PriestleyTaylor))\n\n# varying one input only: scalar form with dot-notation\nTair_vec =  10.0:1.0:20.0\nDataFrame(potential_ET.(Val(:PriestleyTaylor), Tair_vec, pressure, Rn))\nnothing # hide","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"For functions operating only on vectors, e.g. roughness_parameters vectors are provided with the individual inputs. Sometimes, an additional  non-mutating DataFrame  variant is provided for convenience, however, the output value of this variant is  not type-stable.","category":"page"},{"location":"walkthrough/#Ground-heat-flux-and-storage-fluxes","page":"Walkthrough","title":"Ground heat flux and storage fluxes","text":"","category":"section"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"Many functions require the available energy (A), which is defined as (A = R_n - G - S,  all in textW m^-2), where R_n is the net radiation, G is the ground heat flux,  and S is the sum of all storage fluxes of the ecosystem  (see e.g. Leuning et al. 2012 for an overview). For some sites, G is not available,  and for most sites, only a few components of S are measured. ","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"In Bigleaf.jl it is not a problem if G and/or S are missing (other than the results  might be (slightly) biased), but special options exist for the treatment of missing  S and G values. ","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"Note that the default for G and S in the dataframe variant is missing (and assumed zero),  even if those columns are present in the DataFrame. You need to explictly pass those columns with the optional arguments: e.g. potential_ET(df, Val(:PriestleyTaylor); G = df.G)","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"Note that in difference to the bigleaf R package missing entries in an input vector are not relaced by zero by default.  You need to explitly use coalesce when specifying a ground heat flux for which missings should be replaced by zero: ;G = coalesce(df.G, zero(df.G))","category":"page"},{"location":"walkthrough/#Function-walkthrough","page":"Walkthrough","title":"Function walkthrough","text":"","category":"section"},{"location":"walkthrough/#Data-filtering","page":"Walkthrough","title":"Data filtering","text":"","category":"section"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"For most applications it is meaningful to filter your data. There are two main reasons  why we want to filter our data before we start calculating ecosystem properties.  The first one is to exclude datapoints that do not fulfill the requirements of the  EC technique or that are of bad quality due to e.g. instrument failure or gap-filling  with poor confidence. Note that the quality assessment of the EC data is not the purpose  of the Bigleaf.jl package. This is done by other packages (e.g. REddyProc),  which often provide quality control flags for the variables. These quality control  flags are used here to filter out bad-quality datapoints.","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"A second reason for filtering our data is that some derived properties are only  meaningful if certain meteorological conditions are met. For instance, if we are  interested in properties related to plant gas exchange, it makes most sense to focus on  time periods when plants are photosynthetically active  (i.e. in the growing season and at daytime).","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"Bigleaf.jl provides methods that update (or create) the :valid column in  a DataFrame. Records, i.e. rows, that contain non valid conditions are set to false. If the valid column was false before, it stays at false.","category":"page"},{"location":"walkthrough/#setinvalid_qualityflag!","page":"Walkthrough","title":"setinvalid_qualityflag!","text":"","category":"section"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"One can check quality flags. By default (argument setvalmissing = true) this also replaces the non-valid values in the data-columns by missing.","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"thaf = copy(tha)   # keep the original tha DataFrame\n# if the :valid columns does not exist yet, it is created with all values true\nsetinvalid_qualityflag!(thaf; vars = [\"LE\", \"NEE\"])\nsum(.!thaf.valid) # 7 records marked non-valid\nsum(ismissing.(thaf.NEE)) # 7 NEE values set to missing","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"In the function call above, vars lists the variables that should be filtered with  respect to their quality. Optional parameter qc_suffix=\"_qc\" denotes the extension  of the variable name that identifies the column as a quality control indicator of a given  variable. The variables LE and LE_qc, for example, denote the variable itself  (latent heat flux), and the quality of the variable LE, respectively. The optional  argument good_quality_threshold = 1.0 specifies the values of the quality column below which the quality control to be considered as acceptable quality  (i.e. to not be filtered). For example with default value 1,  all LE values whose LE_qc variable is larger than 1 are set to missing.  The variable missing_qc_as_bad is required to decide what to do in  case of missing values in the quality control variable. By default this is (conservatively)  set to true, i.e. all entries where the qc variable is missing is set invalid. ","category":"page"},{"location":"walkthrough/#setinvalid_range!","page":"Walkthrough","title":"setinvalid_range!","text":"","category":"section"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"We can  filter for meteorological conditions to be in acceptable ranges.  For each variable to check we supply the valid minimum and valid maxium as a two-tuple as the second component of a pair. If their is no limit towards small or large values, supply -Inf or Inf as the minimum or maximum respectively.","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"setinvalid_range!(thaf, \n     :PPFD => (200, Inf), \n     :ustar => (0.2, Inf), \n     :LE =>(0, Inf), \n     :VPD => (0.01, Inf)\n     )\nsum(.!thaf.valid) # many more records marked invalid\nminimum(skipmissing(thaf.PPFD)) >= 200 # values outsides range some set to missing\nsum(ismissing.(thaf.PPFD))","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"About half of the data were filtered because radiation was not high enough (night-time).  Another quarter was filtered because they showed negative LE values.  However, most of them occured during the night:","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"sum(ismissing.(thaf.PPFD)) / nrow(thaf) # 0.48\nsum(.!ismissing.(thaf.PPFD) .&& ismissing.(thaf.LE)) / nrow(thaf) # 0.05","category":"page"},{"location":"walkthrough/#setinvalid_nongrowingseason!","page":"Walkthrough","title":"setinvalid_nongrowingseason!","text":"","category":"section"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"A third method filters periods outside the growing season:","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"setinvalid_nongrowingseason!(thaf, 0.4) \nsum(.!thaf.valid) # tha dataset is all within growing season - no additional invalids","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"This function implements a simple growing season filter based on daily smoothed GPP time  series.  Arguments  tGPP determines how high daily GPP has to be in relation to its peak value  within the year. In this case, the value of 0.4 denotes that smoothed GPP has to be at  least 40% of the 95th quantile.  Argument ws controls the degree of smoothing in the timeseries  and should be between 10-20 days.  The purpose of which is to minimize the high variation of GPP between days, Argument min_int is a parameter that avoids that data are switching from  inside the growing season and out from one day to the next.  It determines the minimum number of days that a season should have.  The growing season filter is applicable to all sites, with one more more growing seasons, but its advisable that site-specific parameter settings are used.","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"In this example, it does not really make sense to filter for growing season,  since it uses only one month of data of which we know that vegetation is active at the site.  The algorithm realizes that and does not mark any additional data as invalid.","category":"page"},{"location":"walkthrough/#setinvalid_afterprecip!","page":"Walkthrough","title":"setinvalid_afterprecip!","text":"","category":"section"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"As a last step we will filter for precipitation events.  This is often meaningful for ecophysiological studies because data during and shortly  after rainfall events do not contain much information on the physiological activity  of the vegetation because they comprise significant fractions of evaporation from the  soil and plant surfaces. The purpose of such a filter is mostly to minimize the fraction  of soil and interception evaporation on the total water flux. This filter simply excludes  periods following a precipitation event. A precipitation event, here, is defined as any time  step with a recorded precipitation higher than min_precip (in mm per timestep).  The function then filters all time periods following a precipitation event.  The number of subsequent time periods excluded is controlled by the argument precip_hours.  Here, we exclude rainfall events and the following 24 hours. The timestamps in the DataFrame must be sorted in increasing order.","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"setinvalid_afterprecip!(thaf; min_precip=0.02, hours_after=24)\nsum(.!thaf.valid) # some more invalids","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"In this walkthrough we use the data as filtered above:","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"thas = subset(thaf, :valid)","category":"page"},{"location":"walkthrough/#Meteorological-variables","page":"Walkthrough","title":"Meteorological variables","text":"","category":"section"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"The Bigleaf.jl package provides calculation routines for a number of meteorological variables, which are basic to the calculation of many other variables. A few examples on their usage are given below:","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"# Saturation vapor pressure (kPa) and slope of the saturation vapor pressure curve (kPa K-1)\nEsat_slope(25.0)","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"# psychrometric constant (kPa K-1)\npsychrometric_constant(25.0,100.0) # Tair, pressure","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"# air density (kg m-3)\nair_density(25.0,100.0) # Tair, pressure","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"# dew point (degC)\ndew_point(25.0,1.0) # Tair, VPD","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"# wetbulb temperature (degC)\nwetbulb_temp(25.0, 100.0, 1.0) # Tair, pressure, VPD","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"# estimate atmospheric pressure from elevation (hypsometric equation)\npressure_from_elevation(500.0, 25.0) # elev, Tair","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"There are several formulations describing the empirical function Esat(Tair). The following figure compares them at absole scale and as difference to the  #default method. The differences are small.","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"#using DataFrames\n#Tair = 0:0.25:12\n##Tair = [10.0,20.0]\n#eform_def = Val(:Sonntag_1990)\n#Esat_def = Esat_from_Tair.(Tair; Esat_formula = eform_def)\n#eforms = (Val(:Sonntag_1990), Val(:Alduchov_1996), Val(:Allen_1998))\n#eform = eforms[2]\n#string.(eforms)\n#df = mapreduce(vcat, eforms) do eform \n#    Esat = Esat_from_Tair.(Tair; Esat_formula = eform)\n#    local dff # make sure to not override previous results\n#    dff = DataFrame(\n#        Esat_formula = eform, Tair = Tair, \n#        Esat = Esat,\n#        dEsat = Esat - Esat_def,\n#        )\n#end;\n##using Chain\n#using Pipe\n#using Plots, StatsPlots\n#dfw = @pipe df |> select(_, 1,2, :Esat) |> unstack(_, :Esat_formula, 3)\n#dfws = @pipe df |> select(_, 1,2, :dEsat) |> unstack(_, :Esat_formula, 3)\n#@df dfw plot(:Tair, cols(2:4), legend = :topleft, xlab=\"Tair (degC)\", #ylab=\"Esat (kPa)\")\n#savefig(\"Esat_abs.svg\")\n#@df dfws plot(:Tair, cols(2:4), legend = :topleft, xlab=\"Tair (degC)\", #ylab=\"Esat -ESat_Sonntag_1990 (kPa)\")\n#savefig(\"fig/Esat_rel.svg\")","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"(Image: )","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"(Image: )","category":"page"},{"location":"walkthrough/#Aerodynamic-conductance","page":"Walkthrough","title":"Aerodynamic conductance","text":"","category":"section"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"An important metric for many calculations in the Bigleaf.jl package is the aerodynamic  conductance (G_a) between the land surface and the measurement height. G_a  characterizes how efficiently mass and energy is transferred between the land surface  and the atmosphere. G_a consists of two parts: G_a_m, the aerodynamic conductance  for momentum, and G_b, the canopy boundary layer (or quasi-laminar) conductance.  G_a can be defined as ","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"G_a = 1(1G_a_m + 1G_b). ","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"In this tutorial we will focus on  how to use the function aerodynamic_conductance!.  For further details on the equations,  the reader is directed to the publication of the Bigleaf package (Knauer et al. 2018) and  the references therein. A good overview is provided by e.g. Verma 1989.","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"G_a and in particular G_b can be calculated with varying degrees of complexity.  We start with the simplest version, in which G_b is calculated empirically based on  the friction velocity (u_*) according to Thom 1972:","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"aerodynamic_conductance!(thas);\nthas[1:3, Cols(:datetime,Between(:zeta,:Ga_CO2))]","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"Note that by not providing additional arguments, the default values are taken. We also do not need most of the arguments that can be provided to the function in this case  (i.e. with Gb_model=Val(:Thom_1972)). These are only required if we use a more complex  formulation of G_b. The output of the function is another DataFrame which contains separate columns for  conductances and resistances of different scalars (momentum, heat, and CO_2 by default).","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"For comparison, we now calculate a second estimate of G_a, where the calculation of  G_b is more physically-based (Su et al. 2001), and which requires more input variables  compared to the first version. In particular, we now need LAI, the leaf characteristic  dimension (D_l, assumed to be 1cm here), and information on sensor and canopy height  (z_r and z_h), as well as the displacement height (assumed to be 0.7*z_h):","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"aerodynamic_conductance!(thas;Gb_model=Val(:Su_2001),\n     LAI=thal.zh, zh=thal.zh, d=0.7*thal.zh, zr=thal.zr, Dl=thal.Dl);\nthas[1:3, Cols(:datetime,Between(:zeta,:Ga_CO2))]","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"We see that the values are different compared to the first, empirical estimate.  This is because this formulation takes additional aerodynamically relevant properties  (LAI, D_l) into account that were not considered by the simple empirical formulation.","category":"page"},{"location":"walkthrough/#Boundary-layer-conductance-for-trace-gases","page":"Walkthrough","title":"Boundary layer conductance for trace gases","text":"","category":"section"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"By default, the function aerodynamic_conductance (calling compute_Gb!) returns the  (quasi-laminar) canopy boundary layer (G_b) for heat and water vapor  (which are assumed to be equal in the Bigleaf.jl), as well as for CO_2.  Functin add_Gb calculates G_b for other trace gases, provided that the respective Schmidt  number is known. ","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"compute_Gb!(thas, Val(:Thom_1972)); # adds/modifies column Gb_h and Gb_CO2\nadd_Gb!(thas, :Gb_O2 => 0.84, :Gb_CH4 => 0.99); # adds Gb_O2 and Gb_CH4\nselect(first(thas,3), r\"Gb_\")","category":"page"},{"location":"walkthrough/#Surface-conductance","page":"Walkthrough","title":"Surface conductance","text":"","category":"section"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"Knowledge of aerodynamic conductance G_a  allows us to calculate the bulk surface conductance (G_s) of the site  (In this case by inverting the Penman-Monteith equation). Gs represents the combined  conductance of the vegetation and the soil to water vapor transfer (and as such it is not  a purely physiological quantity). Calculating G_s in Bigleaf.jl is simple:","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"surface_conductance!(thas, Val(:PenmanMonteith));\nthas[1:3,Cols(:datetime, r\"Gs\")]","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"The two columns only differ in the unit of G_s.  One in m s^-1 and one in mol m^-2 s^-1.  In this function we have ignored the ground heat flux (G) and the storage fluxes (S). By default they are assumed zero. In our example we do not have information on the storage fluxes, but we have measurements  on the ground heat flux, which we should add to the function call:","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"surface_conductance!(thas, Val(:PenmanMonteith); G=thas.G);\nthas[1:3,Cols(:datetime, r\"Gs\")]","category":"page"},{"location":"walkthrough/#Wind-profile","page":"Walkthrough","title":"Wind profile","text":"","category":"section"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"The 'big-leaf' framework assumes that wind speed is zero at height d + z_0m  (where z_0m is the roughness length for momentum) and then increases exponentially with  height. The shape of the wind profile further depends on the stability conditions of the  air above the canopy. In Bigleaf.jl, a wind profile can be calculated assuming an exponential increase with  height, which is affected by atmospheric stability. Here, we calculate wind speed at  heights of 22-60m in steps of 2m. As expected, the gradient in wind speed is strongest  close to the surface and weaker at greater heights:","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"using Statistics\nwind_heights = 22:2:60.0\nd = 0.7 * thal.zh\nz0m = roughness_parameters(Val(:wind_profile), thas; zh=thal.zh, zr=thal.zr).z0m\nwp = map(wind_heights) do z\n  wind_profile(z, thas,d, z0m)\nend;\nnothing # hide","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"wp_means = map(x -> mean(skipmissing(x)), wp)\nwp_sd    = map(x -> std(skipmissing(x)), wp)\nwr_mean = mean(skipmissing(thas.wind)) # measurements at reference height\nwr_sd    = std(skipmissing(thas.wind))\nusing Plots # plot wind profiles for the three rows in df\nplot(wp_means, wind_heights, ylab = \"height (m)\", xlab = \"wind speed (m/s)\", xerror=wp_sd, \n  label=nothing)\nscatter!(wp_means, wind_heights, label = nothing)","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"scatter!([wr_mean], [thal.zr], xerror = [wr_sd], markerstrokecolor=:blue, #hide\n  markerstrokewidth=2, label = nothing) # hide","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"Here, the points denote the mean wind speed and the bars denote the standard deviation across time. The blue point/bar represent the values that were measured at zr = 42m.  In this case we see that the wind speed as \"back-calculated\" from the wind profile agrees  well with the actual measurements.","category":"page"},{"location":"walkthrough/#Potential-evapotranspiration","page":"Walkthrough","title":"Potential evapotranspiration","text":"","category":"section"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"For many hydrological applications, it is relevant to get an estimate on the potential  evapotranspiration (PET). At the moment, the Bigleaf.jl contains two formulations  for the estimate of PET: the Priestley-Taylor equation, and the Penman-Monteith equation:","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"potential_ET!(thas, Val(:PriestleyTaylor); G = thas.G)\n\n# aerodynamic Ga_h and surface conductance Gs_mol must be computed before\npotential_ET!(thas, Val(:PenmanMonteith);  G = thas.G, \n        Gs_pot=quantile(skipmissing(thas.Gs_mol),0.95))\nthas[24:26, Cols(:datetime, :ET_pot, :LE_pot)]","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"In the second calculation it is important to provide an estimate of aerodynamic  conductance, G_a, and the potential surface conductance under optimal conditions,  G_s pot.  Here, we have approximated G_s pot with the 95^textth percentile of all  G_s values of the site. ","category":"page"},{"location":"walkthrough/#Global-radiation","page":"Walkthrough","title":"Global radiation","text":"","category":"section"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"Potential radiation for given time and latitude:","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"doy, hour = 160, 10.5\nlat, long = 51.0, 11.5\npotrad = potential_radiation(doy, hour, lat, long)","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"Calculation is based on sun's altitude, one of the horizontal coordinates of its position.","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"using Plots, StatsPlots, DataFrames, Dates, Pipe, Suppressor\nhours = 0:24\nlat,long = 51.0, 13.6 # Dresden Germany\n#deg2second = 24*3600/360\ndoy = 160\ndatetimes = DateTime(2021) .+Day(doy-1) .+ Hour.(hours) #.- Second(round(long*deg2second))\nres3 = @pipe calc_sun_position_hor.(datetimes, lat, long) |> DataFrame(_)\n@df res3 scatter(datetimes, cols([:altitude,:azimuth]), legend = :topleft, # hide\n  xlab=\"Date and Time\", ylab = \"rad\", xrotation=6) # hide","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"The hour-angle at noon represents the difference to local time. In the following example solar time is about 55min ahead of local winter time.","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"summernoon = DateTime(2021) +Day(doy-1) + Hour(12) \nsunpos = calc_sun_position_hor(summernoon, lat, long) \nsunpos.hourangle * 24*60/(2*Ï€) # convert angle to minutes","category":"page"},{"location":"walkthrough/#Unit-interconversions","page":"Walkthrough","title":"Unit interconversions","text":"","category":"section"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"The package further provides a number of useful unit interconversions, which are straightforward to use (please make sure that the input variable is in the right unit, e_g. rH has to be between 0 and 1 and not in percent):","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"# VPD to vapor pressure (e, kPa)\nVPD_to_e(2, 25)","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"# vapor pressure to specific humidity (kg kg-1)\ne_to_q(1, 100)","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"# relative humidity to VPD (kPa)\nrH_to_VPD(0.6, 25)","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"# conductance from ms-1 to mol m-2 s-1\nms_to_mol(0.01, 25, 100) # mC, Tair, pressure","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"# umol CO2 m-2 s-1 to g C m-2 d-1\numolCO2_to_gC(20)","category":"page"},{"location":"walkthrough/","page":"Walkthrough","title":"Walkthrough","text":"Many functions provide constant empirical parameters. Those can be changed by overriding the default values with  bigleaf_constants  and passing this Dictionary to the respective function.","category":"page"},{"location":"metorological_variables/#Meteorological-variables","page":"-","title":"Meteorological variables","text":"","category":"section"},{"location":"metorological_variables/","page":"-","title":"-","text":"Pages = [\"metorological_variables.md\",]","category":"page"},{"location":"metorological_variables/","page":"-","title":"-","text":"latent_heat_vaporization\nvirtual_temp\nEsat_from_Tair\nair_density\npressure_from_elevation\npsychrometric_constant\nkinematic_viscosity\ndew_point\nwetbulb_temp","category":"page"},{"location":"metorological_variables/#Bigleaf.latent_heat_vaporization","page":"-","title":"Bigleaf.latent_heat_vaporization","text":"latent_heat_vaporization(Tair)\n\nLatent heat of vaporization as a function of air temperature using \n\nlambda = (2501 - 000237  Tair) 10^6.\n\nArguments:\n\nTair:  Air temperature (deg C)\n\nValue\n\nlambda: Latent heat of vaporization (J kg-1) \n\nReferences\n\nStull, B, 1988: An Introduction to Boundary Layer Meteorology (p641)           Kluwer Academic Publishers, Dordrecht, Netherlands            \nFoken, T, 2008: Micrometeorology_ Springer, Berlin, Germany\n\nlatent_heat_vaporization.(5:5:45)        \n\n\n\n\n\n","category":"function"},{"location":"metorological_variables/#Bigleaf.virtual_temp","page":"-","title":"Bigleaf.virtual_temp","text":"virtual_temp(Tair,pressure,VPD; ...)\n\nVirtual temperature, defined as the temperature at which dry air would have the same              density as moist air at its actual temperature.\n\nArguments\n\nTair:      Air temperature (deg C)\npressure:  Atmospheric pressure (kPa)\nVPD:       Vapor pressure deficit (kPa)\nEsat_formula: formula used in Esat_from_Tair\n\noptional \n\nconstants=bigleaf_constants(): Dictionary with entries \n:Kelvin - conversion degree Celsius to Kelvin\n:eps - ratio of the molecular weight of water vapor to dry air (-) \n\nDetails\n\nThe virtual temperature is given by:\n\nTv = Tair / (1 - (1 - eps) e/pressure)\n\nwhere Tair is in Kelvin (converted internally)_ Likewise, VPD is converted   to actual vapor pressure (e in kPa) with VPD_to_e internally.\n\nValue\n\nvirtual temperature (deg C)\n\nReferences\n\nMonteith J.L., Unsworth M.H., 2008: Principles of Environmental Physics.           3rd edition. Academic Press, London.\n\nExamples\n\nTair,pressure,VPD = 25,100,1.5\nvt = virtual_temp(Tair,pressure,VPD)  \nâ‰ˆ(vt, 26.9, atol =0.1)\n\n\n\n\n\n","category":"function"},{"location":"metorological_variables/#Bigleaf.Esat_from_Tair","page":"-","title":"Bigleaf.Esat_from_Tair","text":"Esat_slope(Tair; Esat_formula, constants) \nEsat_from_Tair(Tair; Esat_formula, constants) \nEsat_from_Tair_deriv(Tair; Esat_formula, constants)\n\nSaturation Vapor Pressure (Esat) and Slope of the Esat Curve\n\nArguemtns\n\nTair:      Air temperature (deg C)\nEsat_formula=Val(:Sonntag_1990):   Esatformula to be used. Either   `Val(:Sonntag1990)(Default),Val(:Alduchov1996, orVal(:Allen1998)`.\nconstants=bigleaf_constants(): Dictionary with entry  :Pa2kPa \n\nDetails\n\nEsat (kPa) is calculated using the Magnus equation:\n\nEsat = a * exp((b * Tair) / (c + Tair)) / 1000 where the coefficients a, b, c take different values depending on the Esat_formula use The default values are from Sonntag 1990 (a=611.2, b=17.62, c=243.12). This versi of the Magnus equation is recommended by the WMO (WMO 2008; p1.4-29). Alternativel parameter values determined by Alduchov & Eskridge 1996 or Allen et al. 1998 can b used (see references). The slope of the Esat curve (Delta) is calculated as the first derivative of the function:\n\nDelta = dEsat over dTair\n\nValue\n\nEsat_from_Tair: Saturation vapor pressure (kPa)\nEsat_from_Tair_deriv: Slope of the saturation vapor pressure curve (kPa K-1)\nEsat_slope: A tuple of the two above values\n\nReferences\n\nSonntag D. 1990: Important new values of the physical constants of 1986, vapor  pressure formulations based on the ITS-90 and psychrometric formulae.  Zeitschrift fuer Meteorologie 70, 340-344.\n\nWorld Meteorological Organization 2008: Guide to Meteorological Instruments and Methods of Observation (WMO-No.8). World Meteorological Organization, Geneva. 7th Edition,\n\nAlduchov, O. A. & Eskridge, R. E., 1996: Improved Magnus form approximation of  saturation vapor pressure. Journal of Applied Meteorology, 35, 601-609\n\nAllen, R.G., Pereira, L.S., Raes, D., Smith, M., 1998: Crop evapotranspiration - Guidelines for computing crop water requirements - FAO irrigation and drainage paper 56, FAO, Rome.\n\nEsat_from_Tair(20.0)          # Esat in kPa\nEsat_from_Tair_deriv(20.0)    # its derivative to temperature in kPa K-1\nEsat_slope(20.0)              # both as a tuple\n\n\n\n\n\n","category":"function"},{"location":"metorological_variables/#Bigleaf.air_density","page":"-","title":"Bigleaf.air_density","text":"air_density(Tair,pressure; ...)\n\nAir density of moist air from air temperature and pressure_\n\nArguments\n\nTair:      Air temperature (deg C)\npressure:  Atmospheric pressure (kPa)\n\noptional \n\nconstants=bigleaf_constants(): Dictionary with entries   Kelvin, kPa2Pa\n\nDetails\n\nAir density rho is calculated as:\n\nrho = pressure over Rd * Tair\n\nValue\n\nair density (kg m-3)\n\nExamples\n\n# air density at 25degC and standard pressure (101.325kPa)\nair_density(25,101.325)\n\nReferences\n\nFoken, T, 2008: Micrometeorology. Springer, Berlin, Germany.\n\n\n\n\n\n","category":"function"},{"location":"metorological_variables/#Bigleaf.pressure_from_elevation","page":"-","title":"Bigleaf.pressure_from_elevation","text":"pressure_from_elevation(elev,Tair,VPD=missing;...)\n\nAn estimate of mean pressure at a given elevation as predicted by the              hypsometric equation.\n\nArguments\n\nelev:      Elevation asl_ (m)\nTair:      Air temperature (deg C)\nVPD:       Vapor pressure deficit (kPa); optional\n\noptional \n\nconstants=bigleaf_constants(): Dictionary with entries    Kelvin, pressure0, Rd, g, Pa2kPa\n\nDetails\n\nAtmospheric pressure is approximated by the hypsometric equation:\n\npressure = pressure_0  (exp(g * elevation  (Rd Temp)))\n\nThe hypsometric equation gives an estimate of the standard pressure       at a given altitude.       If VPD is provided, humidity correction is applied and the       virtual temperature instead of air temperature is used_ VPD is        internally converted to specific humidity.\n\nValue\n\nAtmospheric pressure (kPa)\n\nReferences\n\nStull B_, 1988: An Introduction to Boundary Layer Meteorology.             Kluwer Academic Publishers, Dordrecht, Netherlands.\n\nExamples\n\n# mean pressure at 500m altitude at 25 deg C and VPD of 1 kPa\npressure_from_elevation(500,25,1)\n\n\n\n\n\n","category":"function"},{"location":"metorological_variables/#Bigleaf.psychrometric_constant","page":"-","title":"Bigleaf.psychrometric_constant","text":"psychrometric_constant(Tair,pressure; ...)\n\nComputes the psychrometric 'constant'.\n\nArgumens\n\nTair:      Air temperature (deg C)\npressure:  Atmospheric pressure (kPa)\n\noptional \n\nconstants=bigleaf_constants(): Dictionary with entries    cp, eps\n\nDetails\n\nThe psychrometric constant (gamma) is given as:\n\ngamma = cp * pressure  (eps * lambda)\n\nwhere lambda is the latent heat of vaporization (J kg-1),   as calculated from latent_heat_vaporization.\n\nValue\n\nthe psychrometric constant (kPa K-1)\n\nReferences\n\nMonteith J.L., Unsworth M.H., 2008: Principles of Environmental Physics.             3rd Edition. Academic Press, London.\n\nExamples\n\npsychrometric_constant.(5.0:5.0:25.0, 100)\n\n\n\n\n\n","category":"function"},{"location":"metorological_variables/#Bigleaf.kinematic_viscosity","page":"-","title":"Bigleaf.kinematic_viscosity","text":"kinematic_viscosity(Tair,pressure; ...)\n\nCalculate the kinematic viscosity of air.\n\nParameters\n\nTair      Air temperature (deg C)\npressure  Atmospheric pressure (kPa)\n\noptional \n\nconstants=bigleaf_constants(): Dictionary with entries    Kelvin, pressure0, Tair0, kPa2Pa\n\nDetails\n\nEq where v is the kinematic viscosity of the air (m2 s-1),           given by (Massman 1999b):\n\nv = 1327 * 10^-5(pressure0pressure)(TairTair0)^181\n\nValue\n\nkinematic viscosity of air (m2 s-1)\n\nReferences\n\nMassman, W.J., 1999b: Molecular diffusivities of Hg vapor in air,              O2 and N2 near STP and the kinematic viscosity and thermal diffusivity             of air near STP. Atmospheric Environment 33, 453-457.      \n\nExamples\n\nTair,pressure = 25,100\nvis = kinematic_viscosity(Tair,pressure)\nâ‰ˆ(vis, 1.58e-5, atol =1e-7)\n\n\n\n\n\n","category":"function"},{"location":"metorological_variables/#Bigleaf.dew_point","page":"-","title":"Bigleaf.dew_point","text":"dew_point(Tair,VPD; ...)\ndew_point_from_e(ea; ...)\n\nCalculate the dew point, the temperature to which air must be               cooled to become saturated (ie e = Esat(Td))\n\nArguments\n\nTair:     Air temperature (degC)\nVPD:      Vapor pressure deficit (kPa)\nea:       actual water vapor pressure (kPa)\n\noptional\n\naccuracy = 1e-03: Accuracy of the result (deg C)\nEsat_formula: formula used in Esat_from_Tair\nconstants=bigleaf_constants(): Dictionary with entries    Pa2kPa \n\nDetails\n\nDew point temperature (Td) is defined by the temperature for which saturaed vapour pressure equals current vapour pressure, i.e. below which  water would start to condensate.\n\ne = Esat(Td)\n\nwhere e is vapor pressure of the air and Esat is the vapor pressure deficit.          This equation is solved for Td by optimization.\n\nValue\n\ndew point temperature (degC)\n\nReferences\n\nMonteith J.L., Unsworth M.H., 2008: Principles of Environmental Physics.             3rd edition. Academic Press, London.\n\nExamples\n\nTair = 20.0\nVPD = 1.5\nTd = dew_point(Tair, VPD; accuracy = 1e-2)                \n(e = VPD_to_e(VPD,Tair), esat_Td = Esat_from_Tair(Td))\n\n\n\n\n\n","category":"function"},{"location":"metorological_variables/#Bigleaf.wetbulb_temp","page":"-","title":"Bigleaf.wetbulb_temp","text":"wetbulb_temp(Tair, pressure, VPD; ...)\n\nCalculate the wet bulb temperature, ie the temperature              that the air would have if it was saturated\n\nArguments\n\nTair:      Air temperature (deg C)\npressure:  Atmospheric pressure (kPa)\nVPD:       Vapor pressure deficit (kPa)\n\noptional\n\naccuracy:  Accuracy of the result (deg C)\nEsat_formula: formula used in Esat_from_Tair\nconstants=bigleaf_constants(): Dictionary with entries     cp, eps,Pa2kPa\n\nDetails\n\nWet-bulb temperature (Tw) is calculated from the following expression:\n\ne = Esat(Tw) - gamma* (Tair - Tw)\n\nThe equation is optimized for Tw. Actual vapor pressure e (kPa) is calculated from VPD using VPD_to_e. The psychrometric constant gamma (kPa K-1) is calculated using psychrometric_constant.\n\nValue\n\nwet-bulb temperature (degC)\n\nReferences\n\nMonteith J.L., Unsworth M.H., 2008: Principles of Environmental Physics.             3rd edition. Academic Press, London.\n\nExamples\n\nwetbulb_temp.([20,25.0], 100, [1,1.6])             \n\n\n\n\n\n","category":"function"},{"location":"bigleaf_constants/#Constants-used-in-Bigleaf","page":"-","title":"Constants used in Bigleaf","text":"","category":"section"},{"location":"bigleaf_constants/","page":"-","title":"-","text":"bigleaf_constants","category":"page"},{"location":"bigleaf_constants/#Bigleaf.bigleaf_constants","page":"-","title":"Bigleaf.bigleaf_constants","text":"bigleaf_constants(;...)\n\nConstants Used in the Bigleaf.jl Package\n\nReturn a Dictionary Dict{Symbol, Real}. Default values can be overridden by the named arguments:\n\ncp           Specific heat of air for constant pressure (J K-1 kg-1)\nRgas         Universal gas constant (J mol-1 K-1)\nRv           Gas constant of water vapor (J kg-1 K-1) (Stull 1988 p.641)\nRd           Gas constant of dry air (J kg-1 K-1) (Foken p. 245)\nMd           Molar mass of dry air (kg mol-1)\nMw           Molar mass of water vapor (kg mol-1)\neps          Ratio of the molecular weight of water vapor to dry air (=Mw/Md)\ng            Gravitational acceleration (m s-2)\nsolar_constant Solar constant (W m-2)\npressure0    Reference atmospheric pressure at sea level (Pa)\nTair0        Reference air temperature (K)\nk            von Karman constant\nCmol         Molar mass of carbon (kg mol-1)\nOmol         Molar mass of oxygen (kg mol-1)\nH2Omol       Molar mass of water (kg mol-1)\nsigma        Stefan-Boltzmann constant (W m-2 K-4)\nPr           Prandtl number\nSc_CO2       Schmidt number for CO2\nKelvin       Conversion degree Celsius to Kelvin\nDwDc         Ratio of the molecular diffusivities for water vapor and CO2\ndays2seconds Seconds per day\nkPa2Pa       Conversion kilopascal (kPa) to pascal (Pa)\nPa2kPa       Conversion pascal (Pa) to kilopascal (kPa)\numol2mol     Conversion micromole (umol) to mole (mol)\nmol2umol     Conversion mole (mol) to micromole (umol)\nkg2g         Conversion kilogram (kg) to gram (g)\ng2kg         Conversion gram (g) to kilogram (kg)\nkJ2J         Conversion kilojoule (kJ) to joule (J)\nJ2kJ         Conversion joule (J) to kilojoule (kJ)\nse_median    Conversion standard error (SE) of the mean to SE of the median\nfrac2percent Conversion between fraction and percent\n\n\n\n\n\n","category":"function"},{"location":"stability_correction/#Stability-correction","page":"-","title":"Stability correction","text":"","category":"section"},{"location":"stability_correction/","page":"-","title":"-","text":"Pages = [\"stability_correction.md\",]","category":"page"},{"location":"stability_correction/","page":"-","title":"-","text":"Monin_Obukhov_length\nstability_parameter\nstability_correction","category":"page"},{"location":"stability_correction/#Bigleaf.Monin_Obukhov_length","page":"-","title":"Bigleaf.Monin_Obukhov_length","text":"Monin_Obukhov_length(Tair, pressure, ustar, H; constants)\nMonin_Obukhov_length!(df;constants=bigleaf_constants())\nMonin_Obukhov_length(df;constants=bigleaf_constants())\n\ncalculates the Monin-Obukhov length.\n\nArguments\n\nTair      : Air temperature (degC)\npressure  : Atmospheric pressure (kPa)\nustar     : Friction velocity (m s-1)\nH         : Sensible heat flux (W m-2)\ndf        : DataFrame containing the above variables\n\noptional\n\nconstants=bigleaf_constants(): Dictionary with entries \nKelvin - conversion degree Celsius to Kelvin \ncp - specific heat of air for constant pressure (J K-1 1) \nk - von Karman constant (-) \ng - gravitational acceleration (m s-2)\n\nDetails\n\nThe Monin-Obukhov length (L) is given by:\n\nL = - (rho * cp * ustar^3 * Tair)  (k * g * H)\n\nwhere rho is air density (kg m-3).\n\nNote\n\nNote that L gets very small for very low ustar values with implications for subsequent functions using L as input. It is recommended to filter data and exclude low ustar values (ustar < ~0.2) beforehand. \n\nValue\n\nMonin-Obukhov length L (m). The non-mutating DataFrame variant returns a vector, the mutating variant add or modifies column :MOL.\n\nReferences\n\nFoken, T, 2008: Micrometeorology. Springer, Berlin, Germany. \n\nSee also\n\nstability_parameter\n\nMonin_Obukhov_length(\n  Tair=25,pressure=100,\n  ustar=seq(0.2,1,0.1),H=seq(40,200,20))\n\n\n\n\n\n","category":"function"},{"location":"stability_correction/#Bigleaf.stability_parameter","page":"-","title":"Bigleaf.stability_parameter","text":"stability_parameter(z,d,MOL)\nstability_parameter(z,d,Tair, pressure, ustar, H; constants)\nstability_parameter!(df::AbstractDataFrame; z,d, MOL=nothing, constants)\n\ncalculates stability parameter \"zeta\", a parameter characterizing stratification in the  lower atmosphere.\n\nArguments\n\nz   : height (m)\nd   : Zero-plane displacement height (m)\nMOL : Monin-Obukhov-length L (m)\ndf  : DataFrame containting the variables required by Monin_Obukhov_length\n\noptional\n\nconstants=bigleaf_constants()\n\nIn the second variant and if MOL=nothing in the DataFrame variants, MOL is computed by  Monin_Obukhov_length.\n\nDetails\n\nThe stability parameter zeta is given by:\n\nzeta = (z - d)  L\n\nwhere L is the Monin-Obukhov length (m), calculated by Monin_Obukhov_length. The displacement height can  be estimated from the function roughness_parameters.\n\nValue\n\nzeta: stability parameter (-). The nonmutainting DataFrame variant returns a vector. The mutating variant modifies or adds column [:zeta].\n\nusing DataFrames\ndf = DataFrame(Tair=25, pressure=100, ustar=0.2:0.1:1.0, H=40:20:200)\nz=40;d=15\nzeta = stability_parameter.(z,d, df.Tair, df.pressure, df.ustar, df.H)\nall(zeta .< 0)\n\n\n\n\n\n","category":"function"},{"location":"stability_correction/#Bigleaf.stability_correction","page":"-","title":"Bigleaf.stability_correction","text":"stability_correction(zeta; \n  stab_formulation=Val(:Dyer_1970))\nstability_correction(z,d, Tair,pressure,ustar,H; constants,\n  stab_formulation=Val(:Dyer_1970))\nstability_correction!(df; zeta, z, d; \n  stab_formulation=Val(:Dyer_1970), constants = bigleaf_constants())\n\nIntegrated Stability Correction Functions for Heat and Momentum\n\nArguments\n\nzeta             : Stability parameter zeta (-)\nTair,pressure,ustar,H : see Monin_Obukhov_length\nz,d            : see stability_parameter\ndf  : DataFrame containting the variables required by Monin_Obukhov_length\nstab_formulation : Formulation for the stability function. Either            Val(:Dyer_1970), or Val(:Businger_1971) or Val(:no_stability_correction)\n\nIn the second and third form computes zeta by stability_parameter and Monin_Obukhov_length and requires respective arguments.\n\nDetails\n\nThese dimensionless values are needed to correct deviations from the exponential wind profile under non-neutral conditions. The functions give the integrated form of the universal functions. They depend on the value of the stability parameter zeta, a function of heigh z, which can be calculated from the function stability_parameter. The integration of the universal functions is:\n\npsi = -x * zeta \n\nfor stable atmospheric conditions (zeta >= 0), and\n\npsi = 2 * log( (1 + y(zeta))  2)\n\nfor unstable atmospheric conditions (zeta < 0).\n\nThe different formulations differ in their value of x and y.\n\nValue\n\na NamedTuple with the following columns:\n\npsi_h: the value of the stability function for heat and water vapor (-)\npsi_m: the value of the stability function for momentum (-)\n\nReferences\n\nDyer, A_J., 1974: A review of flux-profile relationships.  Boundary-Layer Meteorology 7, 363-372.\nDyer, A. J., Hicks, B_B., 1970: Flux-Gradient relationships in the constant flux layer. Quart. J. R. Meteorol. Soc. 96, 715-721.\nBusinger, J_A., Wyngaard, J. C., Izumi, I., Bradley, E. F., 1971: Flux-Profile relationships in the atmospheric surface layer.  J. Atmospheric Sci. 28, 181-189.\nPaulson, C_A., 1970: The mathematical representation of wind speed and temperature profiles in the unstable atmospheric surface layer. Journal of Applied Meteorology 9, 857-861. Foken, T, 2008: Micrometeorology. Springer, Berlin, Germany.\n\nExamples\n\nusing DataFrames\nzeta = -2:0.5:0.5\ndf2 = DataFrame(stability_correction.(zeta; stab_formulation=Val(:Businger_1971)))                         \npropertynames(df2) == [:psi_h, :psi_m]\n\n\n\n\n\n","category":"function"},{"location":"surface_conductance/#Surface-conductance","page":"-","title":"Surface conductance","text":"","category":"section"},{"location":"surface_conductance/","page":"-","title":"-","text":"Pages = [\"surface_conductance.md\",]","category":"page"},{"location":"surface_conductance/","page":"-","title":"-","text":"decoupling\nsurface_conductance","category":"page"},{"location":"surface_conductance/#Bigleaf.decoupling","page":"-","title":"Bigleaf.decoupling","text":"TODO; implement decoupling.\n\nThis stub is there to satisfy links im Help-pages.\n\n\n\n\n\n","category":"function"},{"location":"surface_conductance/#Bigleaf.surface_conductance","page":"-","title":"Bigleaf.surface_conductance","text":"  surface_conductance(::Val{:FluxGradient},   Tair,pressure,VPD,LE; constants)\n  surface_conductance(::Val{:PenmanMonteith}, Tair,pressure,VPD,LE,Rn,Ga_h; \n        G = 0.0, S = 0.0, Esat_formula=Val(:Sonntag_1990), constants)\n\n  surface_conductance!(df, method::Val{:FluxGradient}; kwargs...)\n  surface_conductance!(df, method::Val{:PenmanMonteith}; G = 0.0, S = 0.0, kwargs...)\n\nCalculate surface conductance to water vapor from the inverted Penman-Monteith equation  or from a simple flux-gradient approach.\n\nArguments\n\nTair      : Air temperature (deg C)\npressure  : Atmospheric pressure (kPa)\nRn        : Net radiation (W m-2)\ndf        : DataFrame with above variables\nconstants=bigleaf_constants(): Dictionary with physical constants\n\nadditional for PenmanMonteith\n\nLE        : Latent heat flux (W m-2)\nVPD       : Vapor pressure deficit (kPa)\nGa_h      : Aerodynamic conductance towater vapor (m s-1), assumed equal to that of heat\nG=0.0     : Ground heat flux (W m-2), defaults to zero\nS=0.0     : Sum of all storage fluxes (W m-2), defaults to zero\nEsat_formula=Val(:Sonntag_1990): formula used in Esat_from_Tair\n\nDetails\n\nFor Val(:PenmanMonteith), surface conductance (Gs) in m s-1  is calculated from the inverted Penman-Monteith equation:\n\nG_s = ( LE  G_a  gamma )  ( Delta  A + rho  c_p  G_a  VPD -  LE  (Delta + gamma ))\n\nWhere gamma is the psychrometric constant (kPa K-1), Delta is the slope of the  saturation vapor pressure curve (kPa K^-1), and rho is air density (kg m-3). Available energy (A) is defined as A = R_n - G - S. \n\nGround heat flux and total storage flux can be provided as scalars or vectors of the lenght of the DataFrame in the DataFrame variant. While the bigleaf R package by default converts any missings in G and S to 0, in Bigleaf.jl the caller must take care, e.g. by using G = coalesce(myGvector, 0.0).\n\nFor Val(:FluxGradient), Gs (in mol m-2 s-1) is calculated from VPD and ET only:\n\nGs = ETp  VPD\n\nwhere ET is in mol m-2 s-1 and p is pressure.  Note that this formulation assumes fully coupled conditions (i.e. Ga = inf). This formulation is equivalent to the inverted form of Eq.6 in McNaughton & Black 1973:\n\nGs = LE  gamma  (rho  c_p  VPD)\n\nwhich gives Gs in m s-1. Note that Gs > Gc (canopy conductance) under conditions  when a significant fraction of ET comes from interception or soil evaporation. \n\nIf pressure is not available, it can be approximated by elevation using the  function pressure_from_elevation\n\nValue\n\nNamedTuple with entries: \n\nGs_ms: Surface conductance in m s-1\nGs_mol: Surface conductance in mol m-2 s-1\n\nReferences\n\nMonteith, J., 1965: Evaporation and environment. In Fogg, G. E. (Ed.), The state and movement of water in living organisms (pp.205-234). 19th Symp. Soc. Exp. Biol., Cambridge University Press, Cambridge\nMcNaughton, KG., Black, TA., 1973: A study of evapotranspiration from a Douglas Fir forest using the energy balance approach. Water Resources Research 9, 1579-1590.\n\nExamples\n\nTair,pressure,VPD,LE,Rn,Ga_h,G = (14.8, 97.7, 1.08, 183.0, 778.0, 0.116, 15.6)\nGs = surface_conductance(Val(:PenmanMonteith), Tair,pressure,VPD,LE,Rn,Ga_h;G)\nisapprox(Gs.Gs_mol, 0.28, atol=0.1)\n\n\n\n\n\n","category":"function"},{"location":"evapotranspiration/#Evapotranspiration","page":"-","title":"Evapotranspiration","text":"","category":"section"},{"location":"evapotranspiration/","page":"-","title":"-","text":"Pages = [\"evapotranspiration.md\",]","category":"page"},{"location":"evapotranspiration/","page":"-","title":"-","text":"potential_ET\nequilibrium_imposed_ET","category":"page"},{"location":"evapotranspiration/#Bigleaf.potential_ET","page":"-","title":"Bigleaf.potential_ET","text":"potential_ET(::Val{:PriestleyTaylor}, Tair, pressure, Rn; G=0.0, S=0.0, ...)\npotential_ET(::Val{:PriestleyTaylor}, Tair, pressure, Rn, G, S; ...)\n\npotential_ET(::Val{:PenmanMonteith}, Tair, pressure, Rn, VPD, Ga_h;\n  G=zero(Tair),S=zero(Tair), ...)\nfpotential_ET(::Val{:PenmanMonteith}, Tair, pressure, Rn, VPD, Ga_h, G, S; ...)\n\npotential_ET!(df, approach; ...)\n\nPotential evapotranspiration according to Priestley & Taylor 1972 or the Penman-Monteith equation with a prescribed surface conductance.\n\nArguments\n\nTair:      Air temperature (degC)\npressure:  Atmospheric pressure (kPa)\nRn:        Net radiation (W m-2)\nVPD:       Vapor pressure deficit (kPa)\nGa:        Aerodynamic conductance to heat/water vapor (m s-1)\ndf:        DataFrame with the above variables\napproach:  Approach used: Either Val(:PriestleyTaylor)  or Val(:PenmanMonteith).\n\noptional:\n\nG=0.0:         Ground heat flux (W m-2). Defaults to zero.\nS=0.0:         Sum of all storage fluxes (W m-2) . Defaults to zero.\nconstants=bigleaf_constants(): physical constants (cp, eps, Rd, Rgas)\n\nfor PriestleyTaylor:\n\nalpha = 1.26:   Priestley-Taylor coefficient\n\nfor PenmanMonteith:\n\nGs_pot = 0.6:    Potential/maximum surface conductance (mol m-2 s-1); \nEsat_formula: formula used in Esat_from_Tair\n\nDetails\n\nPotential evapotranspiration is calculated according to Priestley & Taylor, 1972 (approach = Val(:PriestleyTaylor):\n\nmathitLE_pot = (alpha  Delta  (Rn - G - S))  (Delta + gamma)\n\nalpha is the Priestley-Taylor coefficient, Delta is the slope  of the saturation vapor pressure curve (kPa K-1), and gamma is the  psychrometric constant (kPa K-1).\n\nIf approach = Val(:PenmanMonteith), potential evapotranspiration is calculated according to the Penman-Monteith equation:\n\nmathitLE_pot = (Delta  (R_n - G - S) + rho  c_p  mathitVPD  G_a)   (Delta + gamma  (1 + G_aG_s pot)\n\nwhere Delta is the slope of the saturation vapor pressure curve (kPa K-1), rho is the air density (kg m-3),  and gamma is the psychrometric constant (kPa K-1). The value of G_s pot is typically a maximum value of G_s observed at the site,  e.g. the 90^th percentile of G_s within the growing season.\n\nGround heat flux and storage heat flux G or S are provided as optional  arguments. In the input-explicit variants, they default to zero. In the data-frame arguments, they default to missing, which results in assuming them to be zero which is displayed in a log-message. Note that in difference ot the bigleaf R package, you explitly need to care for missing values (see examples).\n\nValue\n\nNamedTuple with the following entries:\n\nET_pot: Potential evapotranspiration (kg m-2 s-1)\nLE_pot: Potential latent heat flux (W m-2)\n\nReferences\n\nPriestley, CHB., Taylor, R_J., 1972: On the assessment of surface heat flux and evaporation using large-scale parameters. Monthly Weather Review 100, 81-92.  \nAllen, RG., Pereira LS., Raes D., Smith M., 1998: Crop evapotranspiration - Guidelines for computing crop water requirements - FAO Irrigation and drainage paper 56.\nNovick, K_A., et al. 2016: The increasing importance of atmospheric demand for ecosystem water and carbon fluxes. Nature Climate Change 6, 1023 - 1027.\n\nSee also\n\nsurface_conductance\n\nExamples\n\nCalculate potential ET of a surface that receives a net radiation of 500 Wm-2 using Priestley-Taylor:\n\nTair, pressure, Rn = 30.0,100.0,500.0\nET_pot, LE_pot = potential_ET(Val(:PriestleyTaylor), Tair, pressure, Rn)    \nâ‰ˆ(ET_pot, 0.000204; rtol = 1e-2)\n\nCalculate potential ET for a surface with known Gs (0.5 mol m-2 s-1) and Ga (0.1 m s-1) using Penman-Monteith:\n\nTair, pressure, Rn = 30.0,100.0,500.0\nVPD, Ga_h, Gs_pot = 2.0, 0.1, 0.5\nET_pot, LE_pot = potential_ET(\n  Val(:PenmanMonteith), Tair,pressure,Rn,VPD, Ga_h; Gs_pot)    \n# now cross-check with the inverted equation\nGs_ms, Gs_mol = surface_conductance(\n  Val(:PenmanMonteith), Tair,pressure,VPD,LE_pot,Rn,Ga_h)\nGs_mol â‰ˆ Gs_pot\n\nDataFrame variant with explicitly replacing missings using coalesce.:\n\nusing DataFrames\ndf = DataFrame(\n  Tair = 20.0:1.0:30.0,pressure = 100.0, Rn = 500.0, G = 105.0, VPD = 2.0, \n  Ga_h = 0.1) \nallowmissing!(df, Cols(:G)); df.G[1] = missing\n#\n# need to provide G explicitly\ndf_ET = potential_ET!(copy(df), Val(:PriestleyTaylor); G = df.G)    \nismissing(df_ET.ET_pot[1])\n#\n# use coalesce to replace missing values by zero\ndf_ET = potential_ET!(\n  copy(df), Val(:PriestleyTaylor); G = coalesce.(df.G, zero(df.G)))    \n!ismissing(df_ET.ET_pot[1])\n\n\n\n\n\n","category":"function"},{"location":"evapotranspiration/#Bigleaf.equilibrium_imposed_ET","page":"-","title":"Bigleaf.equilibrium_imposed_ET","text":"equilibrium_imposed_ET(Tair,pressure,VPD,Gs, Rn; ...)\nequilibrium_imposed_ET!(df; ...)\n\nEvapotranspiration (ET) split up into imposed ET and equilibrium ET.\n\nArgumens\n\nTair      : Air temperature (deg C)\npressure  : Atmospheric pressure (kPa)\nVPD       : Air vapor pressure deficit (kPa)\nGs        : surface conductance to water vapor (m s-1)\nRn        : Net radiation (W m-2)\n\noptional : \n\nG=0       : Ground heat flux (W m-2)\nS=0       : Sum of all storage fluxes (W m-2)\nEsat_formula=Val(:Sonntag_1990): formula used in Esat_from_Tair\nconstants=bigleaf_constants(): pysical constants (cp, eps)\n\nDetails\n\nTotal evapotranspiration can be written in the form (Jarvis & McNaughton 6):\n\nET = Omega mathitET_eq + (1 - Omega) mathitET_imp\n\nwhere Omega is the decoupling coefficient as calculated from decoupling. ET_eq is the equilibrium evapotranspiration i.e., the ET rate that would occur under uncoupled conditions, where the budget is dominated by radiation (when Ga -> 0):\n\nET_eq = (Delta  (R_n - G - S)  lambda)  ( Delta gamma)\n\nwhere Delta is the slope of the saturation vapor pressur(kPa K-1), lambda is the latent heat of vaporization (J kg-1), and gamma is the psychrometric constant (kPa K-1). ET_imp is the imposed evapotranspiration rate, the ET rate that would occur under fully coupled conditions (when Ga -> inf):\n\nET_imp = (rho  c_p  mathitVPD  G_s  lambda)  gamma\n\nwhere rho is the air density (kg m-3).\n\nValue\n\nA NamedTuple or DataFrame with the following columns:\n\nET_eq: Equilibrium ET (kg m-2 s-1)\nET_imp: Imposed ET (kg m-2 s-1)\nLE_eq: Equilibrium LE (W m-2)\nLE_imp: Imposed LE (W m-2)      \n\nReferences\n\nJarvis, PG., McNaughton, KG., 1986: Stomatal control of transpiration: scaling up from leaf to region. Advances in Ecological Rese1-49.\nMonteith, JL., Unsworth, MH., 2008: Principles of ironmPhysics. 3rd edition. Academic Press, London. \n\nExamples\n\nTair,pressure,Rn, VPD, Gs = 20.0,100.0,50.0, 0.5, 0.01\nET_eq, ET_imp, LE_eq, LE_imp = equilibrium_imposed_ET(Tair,pressure,VPD,Gs, Rn)    \nâ‰ˆ(ET_eq, 1.399424e-05; rtol = 1e-5)\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Bigleaf","category":"page"},{"location":"#Bigleaf","page":"Home","title":"Bigleaf","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Bigleaf.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\",]","category":"page"},{"location":"#Meteorological-variables","page":"Home","title":"Meteorological variables","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"metorological_variables.md\",]","category":"page"},{"location":"#Stability-correction","page":"Home","title":"Stability correction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"stability_correction.md\",]","category":"page"},{"location":"#Surface-roughness","page":"Home","title":"Surface roughness","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"surface_roughness.md\",]","category":"page"},{"location":"#Boundary-Layer-Conductance","page":"Home","title":"Boundary Layer Conductance","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"boundary_layer_conductance.md\",]","category":"page"},{"location":"#Aerodynamic-Conductance","page":"Home","title":"Aerodynamic Conductance","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"aerodynamic_conductance.md\",]","category":"page"},{"location":"#Evapotranspiration","page":"Home","title":"Evapotranspiration","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"evapotranspiration.md\",]","category":"page"},{"location":"#Global-radiation","page":"Home","title":"Global radiation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"global_radiation.md\",]","category":"page"},{"location":"#Unit-conversions","page":"Home","title":"Unit conversions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"unit_conversions.md\",\"bigleaf_constants.md\",]","category":"page"},{"location":"#Filtering-data","page":"Home","title":"Filtering data","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"filter_data.md\",]","category":"page"}]
}
